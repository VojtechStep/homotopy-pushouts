From 19567ecc6dcd67e7ef31477898655c4a5523aee2 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 17 Apr 2024 20:48:26 +0200
Subject: [PATCH 1/3] Maps in sequential diagrams of contractibles are
 equivalences

---
 .../sequential-diagrams.lagda.md              | 23 +++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/src/synthetic-homotopy-theory/sequential-diagrams.lagda.md b/src/synthetic-homotopy-theory/sequential-diagrams.lagda.md
index 34fe7194f0..36b3ab63ed 100644
--- a/src/synthetic-homotopy-theory/sequential-diagrams.lagda.md
+++ b/src/synthetic-homotopy-theory/sequential-diagrams.lagda.md
@@ -9,7 +9,9 @@ module synthetic-homotopy-theory.sequential-diagrams where
 ```agda
 open import elementary-number-theory.natural-numbers
 
+open import foundation.contractible-types
 open import foundation.dependent-pair-types
+open import foundation.equivalences
 open import foundation.universe-levels
 ```
 
@@ -88,6 +90,27 @@ module _
   pr2 postcomp-sequential-diagram n g x = map-sequential-diagram A n (g x)
 ```
 
+### A sequential diagram of contractible types consists of equivalences
+
+This is an easy corollary of the fact that every map between
+[contractible types](foundation-core.contractible-types.md) is an
+[equivalence](foundation-core.equivalences.md).
+
+```agda
+module _
+  {l1 : Level} {A : sequential-diagram l1}
+  where
+
+  is-equiv-sequential-diagram-is-contr :
+    ((n : ‚Ñï) ‚Üí is-contr (family-sequential-diagram A n)) ‚Üí
+    (n : ‚Ñï) ‚Üí is-equiv (map-sequential-diagram A n)
+  is-equiv-sequential-diagram-is-contr contrs n =
+    is-equiv-is-contr
+      ( map-sequential-diagram A n)
+      ( contrs n)
+      ( contrs (succ-‚Ñï n))
+```
+
 ## References
 
 {{#bibliography}} {{#reference SDR20}}

From a51d2eb590c2c9bddb01efd15536665d84c6dd49 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 17 Apr 2024 23:33:07 +0200
Subject: [PATCH 2/3] is-equiv diagram -> is-equiv inclusion into colimit

---
 ...cocones-under-sequential-diagrams.lagda.md |   3 +
 ...rsal-property-sequential-colimits.lagda.md | 333 ++++++++++++++++++
 2 files changed, 336 insertions(+)

diff --git a/src/synthetic-homotopy-theory/cocones-under-sequential-diagrams.lagda.md b/src/synthetic-homotopy-theory/cocones-under-sequential-diagrams.lagda.md
index 3863a8f311..5f4d6c625b 100644
--- a/src/synthetic-homotopy-theory/cocones-under-sequential-diagrams.lagda.md
+++ b/src/synthetic-homotopy-theory/cocones-under-sequential-diagrams.lagda.md
@@ -91,6 +91,9 @@ module _
       ( map-cocone-sequential-diagram (succ-‚Ñï n))
       ( map-sequential-diagram A n)
   coherence-cocone-sequential-diagram = pr2 c
+
+  first-map-cocone-sequential-diagram : family-sequential-diagram A 0 ‚Üí X
+  first-map-cocone-sequential-diagram = map-cocone-sequential-diagram 0
 ```
 
 ### Homotopies of cocones under a sequential diagram
diff --git a/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md b/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md
index 54ca756368..714f25f962 100644
--- a/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md
+++ b/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md
@@ -7,20 +7,28 @@ module synthetic-homotopy-theory.universal-property-sequential-colimits where
 <details><summary>Imports</summary>
 
 ```agda
+open import elementary-number-theory.natural-numbers
+
 open import foundation.action-on-identifications-functions
+open import foundation.commuting-squares-of-homotopies
 open import foundation.commuting-triangles-of-maps
 open import foundation.contractible-maps
 open import foundation.contractible-types
 open import foundation.dependent-pair-types
 open import foundation.equivalences
 open import foundation.fibers-of-maps
+open import foundation.function-types
 open import foundation.functoriality-dependent-pair-types
 open import foundation.homotopies
 open import foundation.identity-types
 open import foundation.precomposition-functions
+open import foundation.retractions
+open import foundation.sections
 open import foundation.subtype-identity-principle
 open import foundation.universal-property-equivalences
 open import foundation.universe-levels
+open import foundation.whiskering-higher-homotopies-composition
+open import foundation.whiskering-homotopies-composition
 
 open import synthetic-homotopy-theory.cocones-under-sequential-diagrams
 open import synthetic-homotopy-theory.coforks
@@ -360,3 +368,328 @@ module _
           ( up-c)
           ( up-c'))
 ```
+
+### Inclusion maps of a sequential colimit under a sequential diagram of equivalences are equivalences
+
+If a sequential diagram `(A, a)` with a colimit `X` and inclusion maps
+`i‚Çô : A‚Çô ‚Üí X` has the property that all `a‚Çô : A‚Çô ‚Üí A‚Çô‚Çä‚ÇÅ` are equivalences, then
+all the inclusion maps are also equivalences.
+
+It suffices to show that `i‚ÇÄ : A‚ÇÄ ‚Üí X` is an equivalence, since then the
+statement follows by induction on `n` and the 3-for-2 property of equivalences:
+we have [commuting triangles](foundation-core.commuting-triangles-of-maps.md)
+
+```text
+        a‚Çô
+  A‚Çô ------> A‚Çô‚Çä‚ÇÅ
+    \   ‚âÉ   /
+  ‚âÉ  \     /
+   i‚Çô \   / i‚Çô‚Çä‚ÇÅ
+       ‚à® ‚à®
+        X ,
+```
+
+where `a‚Çô` is an equivalence by assumption, and `i‚Çô` is an equivalence by the
+induction hypothesis, making `i‚Çô‚Çä‚ÇÅ` an equivalence.
+
+To show that `i‚ÇÄ` is an equivalence, we use the map
+
+```text
+  first-map-cocone-sequential-colimit : {Y : ùí∞} ‚Üí cocone A Y ‚Üí (A‚ÇÄ ‚Üí Y)
+```
+
+selecting the first map of a cocone `j‚ÇÄ : A‚ÇÄ ‚Üí Y`, which makes the following
+triangle commute:
+
+```text
+        cocone-map
+  X ‚Üí Y ----------> cocone A Y
+        \         /
+         \       /
+  - ‚àò i‚ÇÄ  \     / first-map-cocone-sequential-colimit
+           \   /
+            ‚à® ‚à®
+          A‚ÇÄ ‚Üí Y .
+```
+
+By `X` being a colimit we have that `cocone-map` is an equivalence. Then it
+suffices to show that `first-map-cocone-sequential-colimit` is an equivalence,
+because it would follow that `- ‚àò i‚ÇÄ` is an equivalence, which by the
+[universal property of equivalences](foundation.universal-property-equivalences.md)
+implies that `i‚Çí` is an equivalence.
+
+To show that `first-map-cocone-sequential-colimit` is an equivalence, we
+construct an inverse map
+
+```text
+  cocone-first-map-is-equiv-sequential-diagram : {Y : ùí∞} ‚Üí (A‚ÇÄ ‚Üí Y) ‚Üí cocone A Y ,
+```
+
+which to every `f : A‚ÇÄ ‚Üí Y` assigns the cocone
+
+```text
+       a‚ÇÄ       a‚ÇÅ
+  A‚ÇÄ ----> A‚ÇÅ ----> A‚ÇÇ ----> ‚ãØ
+    \      |      /
+     \     |     /
+      \  f‚àòa‚ÇÄ‚Åª¬π /
+   f   \   |   / f ‚àò a‚ÇÅ‚Åª¬π ‚àò a‚ÇÄ‚Åª¬π
+        \  |  /
+         ‚à® ‚à® ‚à®
+           Y ,
+```
+
+where the coherences are witnesses that `a‚Çô‚Åª¬π` are retractions of `a‚Çô`.
+
+Since the first inclusion map in this cocone is `f`, it is immediate that
+`cocone-first-map-is-equiv-sequential-diagram` is a section of
+`first-map-cocone-sequential-colimit`. To show that it is a retraction we need a
+homotopy for any cocone `c` between itself and the cocone induced by its first
+map `j‚ÇÄ : A‚ÇÄ ‚Üí Y`. We refer to the cocone induced by `j‚ÇÄ` as `(j‚ÇÄ')`.
+
+The homotopy of cocones consists of homotopies
+
+```text
+  K‚Çô : (j‚ÇÄ')‚Çô ~ j‚Çô ,
+```
+
+which we construct by induction as
+
+```text
+  K‚ÇÄ : (j‚ÇÄ')‚ÇÄ ‚âê j‚ÇÄ ~ j‚ÇÄ             by reflexivity
+  K‚Çô‚Çä‚ÇÅ : (j‚ÇÄ')‚Çô‚Çä‚ÇÅ ‚âê (j‚ÇÄ')‚Çô ‚àò a‚Çô‚Åª¬π
+       ~ j‚Çô ‚àò a‚Çô‚Åª¬π                  by K‚Çô
+       ~ j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô ‚àò a‚Çô‚Åª¬π           by coherence H‚Çô of c
+       ~ j‚Çô‚Çä‚ÇÅ                       by a‚Çô‚Åª¬π being a section of a‚Çô ,
+```
+
+and a coherence datum which upon some pondering boils down to the following
+[commuting square of homotopies](foundation-core.commuting-squares-of-homotopies.md):
+
+```text
+                      K‚Çô ¬∑r (a‚Çô‚Åª¬π ‚àò a‚Çô)                  H‚Çô ¬∑r (a‚Çô‚Åª¬π ‚àò a‚Çô)
+  (j‚ÇÄ')‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô ------------------> j‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô -------------------> j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô
+           |                                   |                                       |
+           |                                   |                                       |
+           | (j‚ÇÄ')‚Çô ¬∑l is-retraction a‚Çô‚Åª¬π      |  j‚Çô ¬∑l is-retraction a‚Çô‚Åª¬π             | j‚Çô‚Çä‚ÇÅ ¬∑l is-section a‚Çô‚Åª¬π ¬∑r a‚Çô
+           |                                   |                                       |
+           ‚à®                                   ‚à®                                       ‚à®
+        (j‚ÇÄ')‚Çô ------------------------------> j‚Çô ----------------------------->  j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô .
+                             K‚Çô                                   H‚Çô
+```
+
+This rectangle is almost a pasting of the squares of naturality of `K‚Çô` and `H‚Çô`
+with respect to `is-retraction` --- it remains to pass from
+`(j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô) ¬∑l is-retraction a‚Çô‚Åª¬π` to `j‚Çô‚Çä‚ÇÅ ¬∑l is-section a‚Çô‚Åª¬π ¬∑r a‚Çô`, which we
+can do by applying the coherence of
+[coherently invertible maps](foundation-core.coherently-invertible-maps.md).
+
+```agda
+module _
+  {l1 l2 : Level} {A : sequential-diagram l1} {Y : UU l2}
+  (equivs : (n : ‚Ñï) ‚Üí is-equiv (map-sequential-diagram A n))
+  where
+
+  map-cocone-first-map-is-equiv-sequential-diagram :
+    (family-sequential-diagram A 0 ‚Üí Y) ‚Üí
+    (n : ‚Ñï) ‚Üí
+    family-sequential-diagram A n ‚Üí Y
+  map-cocone-first-map-is-equiv-sequential-diagram f zero-‚Ñï =
+    f
+  map-cocone-first-map-is-equiv-sequential-diagram f (succ-‚Ñï n) =
+    ( map-cocone-first-map-is-equiv-sequential-diagram f n) ‚àò
+    ( map-inv-is-equiv (equivs n))
+
+  inv-htpy-cocone-first-map-is-equiv-sequential-diagram :
+    (f : family-sequential-diagram A 0 ‚Üí Y) ‚Üí
+    (n : ‚Ñï) ‚Üí
+    coherence-triangle-maps'
+      ( map-cocone-first-map-is-equiv-sequential-diagram f n)
+      ( ( map-cocone-first-map-is-equiv-sequential-diagram f n) ‚àò
+        ( map-inv-is-equiv (equivs n)))
+      ( map-sequential-diagram A n)
+  inv-htpy-cocone-first-map-is-equiv-sequential-diagram f n =
+    ( map-cocone-first-map-is-equiv-sequential-diagram f n) ¬∑l
+    ( is-retraction-map-inv-is-equiv (equivs n))
+
+  htpy-cocone-first-map-is-equiv-sequential-diagram :
+    (f : family-sequential-diagram A 0 ‚Üí Y) ‚Üí
+    (n : ‚Ñï) ‚Üí
+    coherence-triangle-maps
+      ( map-cocone-first-map-is-equiv-sequential-diagram f n)
+      ( ( map-cocone-first-map-is-equiv-sequential-diagram f n) ‚àò
+        ( map-inv-is-equiv (equivs n)))
+      ( map-sequential-diagram A n)
+  htpy-cocone-first-map-is-equiv-sequential-diagram f n =
+    inv-htpy (inv-htpy-cocone-first-map-is-equiv-sequential-diagram f n)
+
+  cocone-first-map-is-equiv-sequential-diagram :
+    (family-sequential-diagram A 0 ‚Üí Y) ‚Üí cocone-sequential-diagram A Y
+  pr1 (cocone-first-map-is-equiv-sequential-diagram f) =
+    map-cocone-first-map-is-equiv-sequential-diagram f
+  pr2 (cocone-first-map-is-equiv-sequential-diagram f) =
+    htpy-cocone-first-map-is-equiv-sequential-diagram f
+
+  is-section-cocone-first-map-is-equiv-sequential-diagram :
+    is-section
+      ( first-map-cocone-sequential-diagram)
+      ( cocone-first-map-is-equiv-sequential-diagram)
+  is-section-cocone-first-map-is-equiv-sequential-diagram = refl-htpy
+
+  htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram :
+    (c : cocone-sequential-diagram A Y) ‚Üí
+    (n : ‚Ñï) ‚Üí
+    map-cocone-first-map-is-equiv-sequential-diagram
+      ( first-map-cocone-sequential-diagram c)
+      ( n) ~
+    map-cocone-sequential-diagram c n
+  htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram
+    c zero-‚Ñï = refl-htpy
+  htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram
+    c (succ-‚Ñï n) =
+    ( ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c
+        ( n)) ¬∑r
+      ( map-inv-is-equiv (equivs n))) ‚àôh
+    ( ( coherence-cocone-sequential-diagram c n) ¬∑r
+      ( map-inv-is-equiv (equivs n))) ‚àôh
+    ( ( map-cocone-sequential-diagram c (succ-‚Ñï n)) ¬∑l
+      ( is-section-map-inv-is-equiv (equivs n)))
+
+  coh-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram :
+    (c : cocone-sequential-diagram A Y) ‚Üí
+    coherence-htpy-cocone-sequential-diagram
+      ( cocone-first-map-is-equiv-sequential-diagram
+        ( first-map-cocone-sequential-diagram c))
+      ( c)
+      ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c)
+  coh-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c n =
+    inv-htpy-left-transpose-htpy-concat
+      ( inv-htpy-cocone-first-map-is-equiv-sequential-diagram
+        ( first-map-cocone-sequential-diagram c)
+        ( n))
+      ( ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c
+          ( n)) ‚àôh
+        ( coherence-cocone-sequential-diagram c n))
+      ( ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c
+          ( succ-‚Ñï n)) ¬∑r
+        ( map-sequential-diagram A n))
+      ( concat-right-homotopy-coherence-square-homotopies
+        ( ( ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram
+              ( c)
+              ( n)) ‚àôh
+            ( coherence-cocone-sequential-diagram c n)) ¬∑r
+          ( map-inv-is-equiv (equivs n) ‚àò map-sequential-diagram A n))
+        ( ( map-cocone-first-map-is-equiv-sequential-diagram
+            ( first-map-cocone-sequential-diagram c)
+            ( n)) ¬∑l
+          ( is-retraction-map-inv-is-equiv (equivs n)))
+        ( ( ( map-cocone-sequential-diagram c (succ-‚Ñï n)) ‚àò
+            ( map-sequential-diagram A n)) ¬∑l
+          ( is-retraction-map-inv-is-equiv (equivs n)))
+        ( ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram
+            ( c)
+            ( n)) ‚àôh
+          ( coherence-cocone-sequential-diagram c n))
+        ( ( inv-preserves-comp-left-whisker-comp
+            ( map-cocone-sequential-diagram c (succ-‚Ñï n))
+            ( map-sequential-diagram A n)
+            ( is-retraction-map-inv-is-equiv (equivs n))) ‚àôh
+          ( left-whisker-comp¬≤
+            ( map-cocone-sequential-diagram c (succ-‚Ñï n))
+            ( inv-htpy (coherence-map-inv-is-equiv (equivs n)))))
+        ( Œª a ‚Üí
+          inv-nat-htpy
+            ( ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram
+                ( c)
+                ( n)) ‚àôh
+              ( coherence-cocone-sequential-diagram c n))
+            ( is-retraction-map-inv-is-equiv (equivs n) a)))
+
+  is-retraction-cocone-first-map-is-equiv-sequential-diagram :
+    is-retraction
+      ( first-map-cocone-sequential-diagram)
+      ( cocone-first-map-is-equiv-sequential-diagram)
+  is-retraction-cocone-first-map-is-equiv-sequential-diagram c =
+    eq-htpy-cocone-sequential-diagram A _ _
+      ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c ,
+        coh-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c)
+
+  is-equiv-first-map-cocone-is-equiv-sequential-diagram :
+    is-equiv first-map-cocone-sequential-diagram
+  is-equiv-first-map-cocone-is-equiv-sequential-diagram =
+    is-equiv-is-invertible
+      ( cocone-first-map-is-equiv-sequential-diagram)
+      ( is-section-cocone-first-map-is-equiv-sequential-diagram)
+      ( is-retraction-cocone-first-map-is-equiv-sequential-diagram)
+
+module _
+  {l1 l2 : Level} {A : sequential-diagram l1}
+  {X : UU l2} {c : cocone-sequential-diagram A X}
+  (up-c : universal-property-sequential-colimit c)
+  (equivs : (n : ‚Ñï) ‚Üí is-equiv (map-sequential-diagram A n))
+  where
+
+  triangle-first-map-cocone-sequential-colimit-is-equiv :
+    {l3 : Level} {Y : UU l3} ‚Üí
+    coherence-triangle-maps
+      ( precomp (first-map-cocone-sequential-diagram c) Y)
+      ( first-map-cocone-sequential-diagram)
+      ( cocone-map-sequential-diagram c)
+  triangle-first-map-cocone-sequential-colimit-is-equiv = refl-htpy
+
+  is-equiv-first-map-cocone-sequential-colimit-is-equiv :
+    is-equiv (first-map-cocone-sequential-diagram c)
+  is-equiv-first-map-cocone-sequential-colimit-is-equiv =
+    is-equiv-is-equiv-precomp
+      ( first-map-cocone-sequential-diagram c)
+      ( Œª Y ‚Üí
+        is-equiv-left-map-triangle
+          ( precomp (first-map-cocone-sequential-diagram c) Y)
+          ( first-map-cocone-sequential-diagram)
+          ( cocone-map-sequential-diagram c)
+          ( triangle-first-map-cocone-sequential-colimit-is-equiv)
+          ( up-c Y)
+          ( is-equiv-first-map-cocone-is-equiv-sequential-diagram equivs))
+
+  is-equiv-map-cocone-sequential-colimit-is-equiv :
+    (n : ‚Ñï) ‚Üí is-equiv (map-cocone-sequential-diagram c n)
+  is-equiv-map-cocone-sequential-colimit-is-equiv zero-‚Ñï =
+    is-equiv-first-map-cocone-sequential-colimit-is-equiv
+  is-equiv-map-cocone-sequential-colimit-is-equiv (succ-‚Ñï n) =
+    is-equiv-right-map-triangle
+      ( map-cocone-sequential-diagram c n)
+      ( map-cocone-sequential-diagram c (succ-‚Ñï n))
+      ( map-sequential-diagram A n)
+      ( coherence-cocone-sequential-diagram c n)
+      ( is-equiv-map-cocone-sequential-colimit-is-equiv n)
+      ( equivs n)
+```
+
+### A sequential colimit of contractible types is contractible
+
+A sequential diagram of contractible types consists of equivalences, as shown in
+[`sequential-diagrams`](synthetic-homotopy-theory.sequential-diagrams.md), so
+the inclusion maps into a colimit are equivalences as well, as shown above. In
+particular, there is an equivalence `i‚ÇÄ : A‚ÇÄ ‚âÉ X`, and since `A‚ÇÄ` is
+contractible, it follows that `X` is contractible.
+
+```agda
+module _
+  {l1 l2 : Level} {A : sequential-diagram l1}
+  {X : UU l2} {c : cocone-sequential-diagram A X}
+  (up-c : universal-property-sequential-colimit c)
+  where
+
+  is-contr-sequential-colimit-is-contr-sequential-diagram :
+    ((n : ‚Ñï) ‚Üí is-contr (family-sequential-diagram A n)) ‚Üí
+    is-contr X
+  is-contr-sequential-colimit-is-contr-sequential-diagram contrs =
+    is-contr-is-equiv'
+      ( family-sequential-diagram A 0)
+      ( map-cocone-sequential-diagram c 0)
+      ( is-equiv-map-cocone-sequential-colimit-is-equiv
+        ( up-c)
+        ( is-equiv-sequential-diagram-is-contr contrs)
+        ( 0))
+      ( contrs 0)
+```

From 2d27765e4374b2cd4bc81db28a2e829de9c131ce Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Thu, 18 Apr 2024 12:06:04 +0200
Subject: [PATCH 3/3] Review comments

---
 ...rsal-property-sequential-colimits.lagda.md | 48 ++++++++++---------
 1 file changed, 26 insertions(+), 22 deletions(-)

diff --git a/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md b/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md
index 714f25f962..beebe0f79a 100644
--- a/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md
+++ b/src/synthetic-homotopy-theory/universal-property-sequential-colimits.lagda.md
@@ -456,26 +456,27 @@ The homotopy of cocones consists of homotopies
 which we construct by induction as
 
 ```text
-  K‚ÇÄ : (j‚ÇÄ')‚ÇÄ ‚âê j‚ÇÄ ~ j‚ÇÄ             by reflexivity
-  K‚Çô‚Çä‚ÇÅ : (j‚ÇÄ')‚Çô‚Çä‚ÇÅ ‚âê (j‚ÇÄ')‚Çô ‚àò a‚Çô‚Åª¬π
-       ~ j‚Çô ‚àò a‚Çô‚Åª¬π                  by K‚Çô
-       ~ j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô ‚àò a‚Çô‚Åª¬π           by coherence H‚Çô of c
-       ~ j‚Çô‚Çä‚ÇÅ                       by a‚Çô‚Åª¬π being a section of a‚Çô ,
+  K‚ÇÄ : (j‚ÇÄ')‚ÇÄ ‚âê j‚ÇÄ ~ j‚ÇÄ     by reflexivity
+  K‚Çô‚Çä‚ÇÅ : (j‚ÇÄ')‚Çô‚Çä‚ÇÅ
+       ‚âê (j‚ÇÄ')‚Çô ‚àò a‚Çô‚Åª¬π      by definition
+       ~ j‚Çô ‚àò a‚Çô‚Åª¬π          by K‚Çô
+       ~ j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô ‚àò a‚Çô‚Åª¬π   by coherence H‚Çô of c
+       ~ j‚Çô‚Çä‚ÇÅ               by a‚Çô‚Åª¬π being a section of a‚Çô ,
 ```
 
 and a coherence datum which upon some pondering boils down to the following
 [commuting square of homotopies](foundation-core.commuting-squares-of-homotopies.md):
 
 ```text
-                      K‚Çô ¬∑r (a‚Çô‚Åª¬π ‚àò a‚Çô)                  H‚Çô ¬∑r (a‚Çô‚Åª¬π ‚àò a‚Çô)
-  (j‚ÇÄ')‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô ------------------> j‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô -------------------> j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô
-           |                                   |                                       |
-           |                                   |                                       |
-           | (j‚ÇÄ')‚Çô ¬∑l is-retraction a‚Çô‚Åª¬π      |  j‚Çô ¬∑l is-retraction a‚Çô‚Åª¬π             | j‚Çô‚Çä‚ÇÅ ¬∑l is-section a‚Çô‚Åª¬π ¬∑r a‚Çô
-           |                                   |                                       |
-           ‚à®                                   ‚à®                                       ‚à®
-        (j‚ÇÄ')‚Çô ------------------------------> j‚Çô ----------------------------->  j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô .
-                             K‚Çô                                   H‚Çô
+                        K‚Çô ¬∑r (a‚Çô‚Åª¬π ‚àò a‚Çô)                H‚Çô ¬∑r (a‚Çô‚Åª¬π ‚àò a‚Çô)
+     (j‚ÇÄ')‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô ----------------> j‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô ----------------> j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô ‚àò a‚Çô‚Åª¬π ‚àò a‚Çô
+              |                                 |                                    |
+              |                                 |                                    |
+  (j‚ÇÄ')‚Çô ¬∑l is-retraction a‚Çô‚Åª¬π      j‚Çô ¬∑l is-retraction a‚Çô‚Åª¬π            j‚Çô‚Çä‚ÇÅ ¬∑l is-section a‚Çô‚Åª¬π ¬∑r a‚Çô
+              |                                 |                                    |
+              ‚à®                                 ‚à®                                    ‚à®
+           (j‚ÇÄ')‚Çô ----------------------------> j‚Çô -------------------------->  j‚Çô‚Çä‚ÇÅ ‚àò a‚Çô .
+                               K‚Çô                                 H‚Çô
 ```
 
 This rectangle is almost a pasting of the squares of naturality of `K‚Çô` and `H‚Çô`
@@ -605,14 +606,17 @@ module _
               ( coherence-cocone-sequential-diagram c n))
             ( is-retraction-map-inv-is-equiv (equivs n) a)))
 
-  is-retraction-cocone-first-map-is-equiv-sequential-diagram :
-    is-retraction
-      ( first-map-cocone-sequential-diagram)
-      ( cocone-first-map-is-equiv-sequential-diagram)
-  is-retraction-cocone-first-map-is-equiv-sequential-diagram c =
-    eq-htpy-cocone-sequential-diagram A _ _
-      ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c ,
-        coh-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram c)
+  abstract
+    is-retraction-cocone-first-map-is-equiv-sequential-diagram :
+      is-retraction
+        ( first-map-cocone-sequential-diagram)
+        ( cocone-first-map-is-equiv-sequential-diagram)
+    is-retraction-cocone-first-map-is-equiv-sequential-diagram c =
+      eq-htpy-cocone-sequential-diagram A _ _
+        ( ( htpy-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram
+            ( c)) ,
+          ( coh-htpy-is-retraction-cocone-first-map-is-equiv-sequential-diagram
+            ( c)))
 
   is-equiv-first-map-cocone-is-equiv-sequential-diagram :
     is-equiv first-map-cocone-sequential-diagram
