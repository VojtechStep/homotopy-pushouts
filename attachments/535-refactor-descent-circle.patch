From 24223748ed075ca2ca9dc490f681219047cb0945 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Sun, 26 Feb 2023 20:59:45 +0100
Subject: [PATCH 01/13] Update names, add modules, cleanup coding style

---
 .../descent-circle.lagda.md                   | 150 ++++++++++--------
 .../universal-cover-circle.lagda.md           |   2 +-
 2 files changed, 81 insertions(+), 71 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index bfeb50b0f3..3836b80f7c 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -36,10 +36,18 @@ The descent property uniquely characterizes type families over the circle.
 
 ## Definitions
 
+### Type families over the circle
+
 ```agda
 Fam-circle :
   ( l1 : Level) → UU (lsuc l1)
 Fam-circle l1 = Σ (UU l1) Aut
+
+type-Fam-circle : {l1 : Level} → (P : Fam-circle l1) → UU l1
+type-Fam-circle = pr1
+
+aut-Fam-circle : {l1 : Level} → (P : Fam-circle l1) → Aut (type-Fam-circle P)
+aut-Fam-circle = pr2
 ```
 
 ## Properties
@@ -50,106 +58,108 @@ Fam-circle l1 = Σ (UU l1) Aut
 Eq-Fam-circle :
   { l1 : Level} → Fam-circle l1 → Fam-circle l1 → UU l1
 Eq-Fam-circle P Q =
-  Σ ( (pr1 P) ≃ (pr1 Q))
+  Σ ( (type-Fam-circle P) ≃ (type-Fam-circle Q))
     ( λ h →
-      ( (map-equiv h) ∘ (map-equiv (pr2 P))) ~ ((map-equiv (pr2 Q)) ∘ (map-equiv h)))
+      ( (map-equiv h) ∘ (map-equiv (aut-Fam-circle P))) ~
+      ( (map-equiv (aut-Fam-circle Q)) ∘ (map-equiv h)))
 
-reflexive-Eq-Fam-circle :
+refl-Eq-Fam-circle :
   { l1 : Level} (P : Fam-circle l1) → Eq-Fam-circle P P
-reflexive-Eq-Fam-circle (pair X e) =
-  pair id-equiv refl-htpy
+refl-Eq-Fam-circle (X , e) =
+  id-equiv , refl-htpy
 
-Eq-Fam-circle-eq :
-  { l1 : Level} (P Q : Fam-circle l1) → Id P Q → Eq-Fam-circle P Q
-Eq-Fam-circle-eq P .P refl = reflexive-Eq-Fam-circle P
+Eq-eq-Fam-circle :
+  { l1 : Level} (P Q : Fam-circle l1) → P ＝ Q → Eq-Fam-circle P Q
+Eq-eq-Fam-circle P .P refl = refl-Eq-Fam-circle P
 
 is-contr-total-Eq-Fam-circle :
   { l1 : Level} (P : Fam-circle l1) →
   is-contr (Σ (Fam-circle l1) (Eq-Fam-circle P))
-is-contr-total-Eq-Fam-circle (pair X e) =
+is-contr-total-Eq-Fam-circle (X , e) =
   is-contr-total-Eq-structure
     ( λ Y f h →
       ((map-equiv h) ∘ (map-equiv e)) ~ ((map-equiv f) ∘ (map-equiv h)))
     ( is-contr-total-equiv X)
-    ( pair X id-equiv)
+    ( X , id-equiv)
   ( is-contr-total-htpy-equiv e)
 
-is-equiv-Eq-Fam-circle-eq :
-  { l1 : Level} (P Q : Fam-circle l1) → is-equiv (Eq-Fam-circle-eq P Q)
-is-equiv-Eq-Fam-circle-eq P =
+is-equiv-Eq-eq-Fam-circle :
+  { l1 : Level} (P Q : Fam-circle l1) → is-equiv (Eq-eq-Fam-circle P Q)
+is-equiv-Eq-eq-Fam-circle P =
   fundamental-theorem-id
     ( is-contr-total-Eq-Fam-circle P)
-    ( Eq-Fam-circle-eq P)
+    ( Eq-eq-Fam-circle P)
 
 eq-Eq-Fam-circle :
-  { l1 : Level} (P Q : Fam-circle l1) → Eq-Fam-circle P Q → Id P Q
-eq-Eq-Fam-circle P Q = map-inv-is-equiv (is-equiv-Eq-Fam-circle-eq P Q)
+  { l1 : Level} (P Q : Fam-circle l1) → Eq-Fam-circle P Q → P ＝ Q
+eq-Eq-Fam-circle P Q = map-inv-is-equiv (is-equiv-Eq-eq-Fam-circle P Q)
 ```
 
 ### Uniqueness of type families defined by `Fam-circle`
 
 ```agda
-ev-fam-circle :
-  { l1 l2 : Level} {X : UU l1} (l : free-loop X) →
-  ( X → UU l2) → Fam-circle l2
-ev-fam-circle l P =
-  pair
-    ( P (base-free-loop l))
-    ( equiv-tr P (loop-free-loop l))
-
-comparison-fam-circle :
+comparison-Fam-circle :
   ( l1 : Level) → free-loop (UU l1) → Fam-circle l1
-comparison-fam-circle l1 = tot (λ Y → equiv-eq)
+comparison-Fam-circle l1 = tot (λ Y → equiv-eq)
 
-is-equiv-comparison-fam-circle :
-  ( l1 : Level) → is-equiv (comparison-fam-circle l1)
-is-equiv-comparison-fam-circle l1 =
+is-equiv-comparison-Fam-circle :
+  ( l1 : Level) → is-equiv (comparison-Fam-circle l1)
+is-equiv-comparison-Fam-circle l1 =
   is-equiv-tot-is-fiberwise-equiv (λ Y → univalence Y Y)
 
-triangle-comparison-fam-circle :
-  { l1 l2 : Level} {X : UU l1} (l : free-loop X) →
-  (ev-fam-circle l) ~ ((comparison-fam-circle l2) ∘ (ev-free-loop l (UU l2)))
-triangle-comparison-fam-circle l P =
-  eq-Eq-Fam-circle
-    ( ev-fam-circle l P)
-    ( comparison-fam-circle _ (ev-free-loop l (UU _) P))
-    ( pair id-equiv (htpy-eq (inv (tr-equiv-eq-ap (pr2 l)))))
-
-is-equiv-ev-fam-circle-universal-property-circle :
+module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
-  ( up-circle : universal-property-circle (lsuc l2) l) →
-  is-equiv (ev-fam-circle {l2 = l2} l)
-is-equiv-ev-fam-circle-universal-property-circle {l2 = l2} l up-circle =
-  is-equiv-comp-htpy
-    ( ev-fam-circle l)
-    ( comparison-fam-circle l2)
-    ( ev-free-loop l (UU l2))
-    ( triangle-comparison-fam-circle l)
-    ( up-circle (UU l2))
-    ( is-equiv-comparison-fam-circle l2)
+  where
+
+  ev-Fam-circle : ( X → UU l2) → Fam-circle l2
+  pr1 (ev-Fam-circle P) = P (base-free-loop l)
+  pr2 (ev-Fam-circle P) = equiv-tr P (loop-free-loop l)
+
+  triangle-comparison-fam-circle :
+    ev-Fam-circle ~ ((comparison-Fam-circle l2) ∘ (ev-free-loop l (UU l2)))
+  triangle-comparison-fam-circle P =
+    eq-Eq-Fam-circle
+      ( ev-Fam-circle P)
+      ( comparison-Fam-circle _ (ev-free-loop l (UU _) P))
+      ( id-equiv , (htpy-eq (inv (tr-equiv-eq-ap (loop-free-loop l)))))
+
+  is-equiv-ev-Fam-circle-universal-property-circle :
+    ( up-circle : universal-property-circle (lsuc l2) l) →
+    is-equiv ev-Fam-circle
+  is-equiv-ev-Fam-circle-universal-property-circle up-circle =
+     is-equiv-comp-htpy
+      ( ev-Fam-circle)
+      ( comparison-Fam-circle l2)
+      ( ev-free-loop l (UU l2))
+      ( triangle-comparison-fam-circle)
+      ( up-circle (UU l2))
+      ( is-equiv-comparison-Fam-circle l2)
 
 unique-family-property-circle :
   { l1 : Level} (l2 : Level) {X : UU l1} (l : free-loop X) →
   UU (l1 ⊔ lsuc l2)
 unique-family-property-circle l2 {X} l =
   ( Q : Fam-circle l2) →
-    is-contr (Σ (X → UU l2) (λ P → Eq-Fam-circle Q (ev-fam-circle l P)))
+    is-contr (Σ (X → UU l2) (λ P → Eq-Fam-circle Q (ev-Fam-circle l P)))
 
-unique-family-property-universal-property-circle :
-  { l1 l2 : Level} {X : UU l1} (l : free-loop X) →
-  universal-property-circle (lsuc l2) l → unique-family-property-circle l2 l
-unique-family-property-universal-property-circle l up-circle Q =
-  is-contr-is-equiv'
-    ( fib (ev-fam-circle l) Q)
-    ( tot (λ P → (Eq-Fam-circle-eq Q (ev-fam-circle l P)) ∘ inv))
-    ( is-equiv-tot-is-fiberwise-equiv
-      ( λ P →
-        is-equiv-comp _ _
-          ( is-equiv-inv _ _)
-          ( is-equiv-Eq-Fam-circle-eq Q (ev-fam-circle l P))))
-    ( is-contr-map-is-equiv
-      ( is-equiv-ev-fam-circle-universal-property-circle l up-circle)
-      ( Q))
+module _
+  { l1 l2 : Level} {X : UU l1} (l : free-loop X)
+  where
+
+  unique-family-property-universal-property-circle :
+    universal-property-circle (lsuc l2) l → unique-family-property-circle l2 l
+  unique-family-property-universal-property-circle up-circle Q =
+    is-contr-is-equiv'
+      ( fib (ev-Fam-circle l) Q)
+      ( tot (λ P → Eq-eq-Fam-circle Q (ev-Fam-circle l P) ∘ inv))
+      ( is-equiv-tot-is-fiberwise-equiv
+        ( λ P →
+          is-equiv-comp _ _
+            ( is-equiv-inv _ _)
+            ( is-equiv-Eq-eq-Fam-circle Q (ev-Fam-circle l P))))
+      ( is-contr-map-is-equiv
+        ( is-equiv-ev-Fam-circle-universal-property-circle l up-circle)
+        ( Q))
 ```
 
 ### Sections of families over the circle
@@ -158,7 +168,7 @@ unique-family-property-universal-property-circle l up-circle Q =
 Section-Fam-circle :
   { l1 l2 : Level} {X : UU l1} (l : free-loop X) (P : Fam-circle l2) → UU _
 Section-Fam-circle l P =
-  Σ (pr1 P) (λ p → Id (map-equiv (pr2 P) p) p)
+  Σ (type-Fam-circle P) (λ p → (map-equiv (aut-Fam-circle P) p) ＝ p)
 
 fam-circle :
   { l1 l2 : Level} {X : UU l1} (l : free-loop X) →
@@ -166,17 +176,17 @@ fam-circle :
   Fam-circle l2 → X → UU l2
 fam-circle {l1} {l2} l dup-circle =
   map-inv-is-equiv
-    ( is-equiv-ev-fam-circle-universal-property-circle l
+    ( is-equiv-ev-Fam-circle-universal-property-circle l
       ( universal-property-dependent-universal-property-circle l dup-circle))
 
 section-fam-circle :
   { l1 l2 : Level} {X : UU l1} (l : free-loop X) →
   ( dup-circle : dependent-universal-property-circle l2 l) →
   ( Q : X → UU l2) (P : Fam-circle l2) →
-  ( e : Eq-Fam-circle P (ev-fam-circle l Q)) →
+  ( e : Eq-Fam-circle P (ev-Fam-circle l Q)) →
   Section-Fam-circle l P → (x : X) → Q x
-section-fam-circle l dup-circle Q P (pair e H) (pair p α) =
+section-fam-circle l dup-circle Q P (e , H) (p , α) =
   map-inv-is-equiv
     ( dup-circle Q)
-    ( pair (map-equiv e p) ((inv (H p)) ∙ (ap (map-equiv e) α)))
+    ( (map-equiv e p) , ((inv (H p)) ∙ (ap (map-equiv e) α)))
 ```
diff --git a/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md b/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
index 2e2774dbf5..18fb7ab0c8 100644
--- a/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
@@ -144,7 +144,7 @@ abstract
     { l1 : Level} {X : UU l1} (l : free-loop X) →
     ( {k : Level} → dependent-universal-property-circle k l) →
     Σ ( X → UU lzero)
-      ( λ P → Eq-Fam-circle (pair ℤ equiv-succ-ℤ) (ev-fam-circle l P))
+      ( λ P → Eq-Fam-circle (pair ℤ equiv-succ-ℤ) (ev-Fam-circle l P))
   Fundamental-cover-circle {l1} l dup-circle =
     center
       ( unique-family-property-universal-property-circle l

From 73389cf37bdfb70d4c509038f22aaaa64a08f731 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Tue, 21 Mar 2023 16:24:27 +0100
Subject: [PATCH 02/13] Capitalization fix

---
 src/synthetic-homotopy-theory/descent-circle.lagda.md | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 3836b80f7c..5baed31b12 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -115,9 +115,9 @@ module _
   pr1 (ev-Fam-circle P) = P (base-free-loop l)
   pr2 (ev-Fam-circle P) = equiv-tr P (loop-free-loop l)
 
-  triangle-comparison-fam-circle :
+  triangle-comparison-Fam-circle :
     ev-Fam-circle ~ ((comparison-Fam-circle l2) ∘ (ev-free-loop l (UU l2)))
-  triangle-comparison-fam-circle P =
+  triangle-comparison-Fam-circle P =
     eq-Eq-Fam-circle
       ( ev-Fam-circle P)
       ( comparison-Fam-circle _ (ev-free-loop l (UU _) P))
@@ -131,7 +131,7 @@ module _
       ( ev-Fam-circle)
       ( comparison-Fam-circle l2)
       ( ev-free-loop l (UU l2))
-      ( triangle-comparison-fam-circle)
+      ( triangle-comparison-Fam-circle)
       ( up-circle (UU l2))
       ( is-equiv-comparison-Fam-circle l2)
 

From 6e79457c0bbbc09e77f2f5667978304168070180 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Tue, 21 Mar 2023 16:25:28 +0100
Subject: [PATCH 03/13] Formalize descent data for the circle as in the book

---
 .../descent-circle.lagda.md                   | 150 +++++++++++++++---
 1 file changed, 129 insertions(+), 21 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 5baed31b12..18e7860f40 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -21,6 +21,7 @@ open import foundation.fundamental-theorem-of-identity-types
 open import foundation.homotopies
 open import foundation.identity-types
 open import foundation.structure-identity-principle
+open import foundation.path-algebra
 open import foundation.univalence
 open import foundation.universe-levels
 
@@ -162,7 +163,47 @@ module _
         ( Q))
 ```
 
-### Sections of families over the circle
+### Sections of families over the circle are exactly the fixed points of the associated automorphism
+
+```agda
+module _
+  { l1 l2 : Level} {X : UU l1} (l : free-loop X)
+  ( Q : X → UU l2) (P : Fam-circle l2) (αβ : Eq-Fam-circle P (ev-Fam-circle l Q))
+  where
+
+  private
+    α : type-Fam-circle P ≃ Q (base-free-loop l)
+    α = pr1 αβ
+
+  map-path-over-loop-fib-aut-Fam-circle :
+    (x y : type-Fam-circle P) → (map-equiv (aut-Fam-circle P) x ＝ y ) →
+    ( path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
+  map-path-over-loop-fib-aut-Fam-circle x y q =
+    inv (pr2 αβ _) ∙ (ap (map-equiv α) q)
+
+  is-equiv-map-path-over-loop-fib-aut-Fam-circle :
+    ( x y : type-Fam-circle P) →
+    is-equiv (map-path-over-loop-fib-aut-Fam-circle x y)
+  is-equiv-map-path-over-loop-fib-aut-Fam-circle x y =
+    fundamental-theorem-id
+      ( is-contr-equiv'
+        ( fib (map-equiv α) _)
+        ( equiv-fib _ _)
+        ( is-contr-map-is-equiv
+          ( is-equiv-map-equiv α)
+          ( _)))
+      ( map-path-over-loop-fib-aut-Fam-circle x)
+      ( _)
+
+  equiv-path-over-loop-fib-aut-Fam-circle :
+    (x y : type-Fam-circle P) →
+    (map-equiv (aut-Fam-circle P) x ＝ y) ≃
+    (path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
+  pr1 (equiv-path-over-loop-fib-aut-Fam-circle x y) =
+    map-path-over-loop-fib-aut-Fam-circle x y
+  pr2 (equiv-path-over-loop-fib-aut-Fam-circle x y) =
+    is-equiv-map-path-over-loop-fib-aut-Fam-circle x y
+```
 
 ```agda
 Section-Fam-circle :
@@ -170,23 +211,90 @@ Section-Fam-circle :
 Section-Fam-circle l P =
   Σ (type-Fam-circle P) (λ p → (map-equiv (aut-Fam-circle P) p) ＝ p)
 
-fam-circle :
-  { l1 l2 : Level} {X : UU l1} (l : free-loop X) →
-  ( {k : Level} → dependent-universal-property-circle k l) →
-  Fam-circle l2 → X → UU l2
-fam-circle {l1} {l2} l dup-circle =
-  map-inv-is-equiv
-    ( is-equiv-ev-Fam-circle-universal-property-circle l
-      ( universal-property-dependent-universal-property-circle l dup-circle))
-
-section-fam-circle :
-  { l1 l2 : Level} {X : UU l1} (l : free-loop X) →
-  ( dup-circle : dependent-universal-property-circle l2 l) →
-  ( Q : X → UU l2) (P : Fam-circle l2) →
-  ( e : Eq-Fam-circle P (ev-Fam-circle l Q)) →
-  Section-Fam-circle l P → (x : X) → Q x
-section-fam-circle l dup-circle Q P (e , H) (p , α) =
-  map-inv-is-equiv
-    ( dup-circle Q)
-    ( (map-equiv e p) , ((inv (H p)) ∙ (ap (map-equiv e) α)))
-```
+module _
+  { l1 l2 : Level} {X : UU l1} (l : free-loop X)
+  ( Q : X → UU l2) (P : Fam-circle l2)
+  ( αβ : Eq-Fam-circle P (ev-Fam-circle l Q))
+  where
+
+  private
+    α : type-Fam-circle P ≃ Q (base-free-loop l)
+    α = pr1 αβ
+
+  ev-Section-Fam-circle :
+    ( (x : X) → Q x) → Section-Fam-circle l P
+  pr1 (ev-Section-Fam-circle s) =
+    map-inv-equiv
+      ( α)
+      ( s (base-free-loop l))
+  pr2 (ev-Section-Fam-circle s) =
+    map-inv-is-equiv
+      ( is-equiv-map-path-over-loop-fib-aut-Fam-circle l Q P αβ _ _)
+      ( ( ap (tr Q (loop-free-loop l)) (issec-map-inv-equiv α _)) ∙
+        ( ( apd s (loop-free-loop l)) ∙
+          ( inv (issec-map-inv-equiv α _))))
+
+  equiv-Section-Fam-circle-free-dependent-loop :
+    Section-Fam-circle l P ≃ free-dependent-loop l Q
+  equiv-Section-Fam-circle-free-dependent-loop =
+    equiv-Σ _ α (λ x → equiv-path-over-loop-fib-aut-Fam-circle l Q P αβ x x)
+
+  comparison-Section-Fam-circle :
+    Section-Fam-circle l P → free-dependent-loop l Q
+  comparison-Section-Fam-circle =
+    map-equiv equiv-Section-Fam-circle-free-dependent-loop
+
+  triangle-comparison-Section-Fam-circle :
+    ( ev-free-loop-Π l Q) ~
+    ( comparison-Section-Fam-circle ∘ ev-Section-Fam-circle)
+  triangle-comparison-Section-Fam-circle s =
+    eq-Eq-free-dependent-loop l Q
+      ( ev-free-loop-Π l Q s)
+      ( ( comparison-Section-Fam-circle ∘ ev-Section-Fam-circle) s)
+      ( inv issec-inv-α ,
+        inv
+        ( ( horizontal-concat-Id²
+            ( refl {x = ap _ (inv issec-inv-α)})
+            ( issec-map-inv-is-equiv
+              ( is-equiv-map-path-over-loop-fib-aut-Fam-circle l Q P αβ _ _)
+              ( _))) ∙
+          ( ( inv (assoc (ap _ (inv issec-inv-α)) _ _)) ∙
+            ( horizontal-concat-Id²
+              ( inv
+                ( ap-concat-eq _
+                  ( inv issec-inv-α)
+                  ( issec-inv-α)
+                  ( refl)
+                  ( inv (left-inv issec-inv-α))))
+              ( refl)))))
+    where
+    issec-inv-α : eq-value (map-equiv α ∘ map-inv-equiv α) id (s (base-free-loop l))
+    issec-inv-α = issec-map-inv-equiv α _
+
+  is-equiv-comparison-Section-Fam-circle :
+    is-equiv comparison-Section-Fam-circle
+  is-equiv-comparison-Section-Fam-circle =
+    is-equiv-map-equiv equiv-Section-Fam-circle-free-dependent-loop
+
+  is-equiv-ev-Section-Fam-circle :
+    (dependent-universal-property-circle l2 l) →
+    is-equiv ev-Section-Fam-circle
+  is-equiv-ev-Section-Fam-circle dup =
+    is-equiv-right-factor-htpy
+      ( ev-free-loop-Π l Q)
+      ( comparison-Section-Fam-circle)
+      ( ev-Section-Fam-circle)
+      ( triangle-comparison-Section-Fam-circle)
+      ( is-equiv-comparison-Section-Fam-circle)
+      ( dup Q)
+
+  equiv-ev-Section-Fam-circle :
+    (dependent-universal-property-circle l2 l) →
+    ((x : X) → Q x) ≃ (Section-Fam-circle l P)
+  pr1 (equiv-ev-Section-Fam-circle dup) = ev-Section-Fam-circle
+  pr2 (equiv-ev-Section-Fam-circle dup) = is-equiv-ev-Section-Fam-circle dup
+
+  compute-ev-Section-Fam-circle :
+    ( pr1 ∘ ev-Section-Fam-circle ) ~
+    ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) _))
+  compute-ev-Section-Fam-circle = refl-htpy

From a7d3b8f1587d4797eae0495bb2619461d80a431e Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Tue, 21 Mar 2023 17:34:39 +0100
Subject: [PATCH 04/13] Renaming descent data, formatting

---
 .../descent-circle.lagda.md                   | 305 ++++++++++--------
 .../universal-cover-circle.lagda.md           |   5 +-
 2 files changed, 176 insertions(+), 134 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 18e7860f40..17af65784d 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -37,46 +37,63 @@ The descent property uniquely characterizes type families over the circle.
 
 ## Definitions
 
-### Type families over the circle
+### Descent data for the circle
 
 ```agda
-Fam-circle :
+Descent-data-circle :
   ( l1 : Level) → UU (lsuc l1)
-Fam-circle l1 = Σ (UU l1) Aut
+Descent-data-circle l1 = Σ (UU l1) Aut
 
-type-Fam-circle : {l1 : Level} → (P : Fam-circle l1) → UU l1
-type-Fam-circle = pr1
+module _
+  { l1 : Level} (P : Descent-data-circle l1)
+  where
+
+  type-Descent-data-circle : UU l1
+  type-Descent-data-circle = pr1 P
+
+  aut-Descent-data-circle : Aut type-Descent-data-circle
+  aut-Descent-data-circle = pr2 P
+```
+
+### Fixpoints of the descent data
 
-aut-Fam-circle : {l1 : Level} → (P : Fam-circle l1) → Aut (type-Fam-circle P)
-aut-Fam-circle = pr2
+```agda
+fixpoint-Descent-data-circle :
+  { l1 l2 : Level} {X : UU l1} (l : free-loop X)
+  ( P : Descent-data-circle l2) → UU _
+fixpoint-Descent-data-circle l P =
+  Σ ( type-Descent-data-circle P)
+    ( λ p → (map-equiv (aut-Descent-data-circle P) p) ＝ p)
 ```
 
 ## Properties
 
-### Characterization of the identity type of `Fam-circle`
+### Characterization of the identity type of descent data for the circle
 
 ```agda
-Eq-Fam-circle :
-  { l1 : Level} → Fam-circle l1 → Fam-circle l1 → UU l1
-Eq-Fam-circle P Q =
-  Σ ( (type-Fam-circle P) ≃ (type-Fam-circle Q))
+Eq-Descent-data-circle :
+  { l1 : Level} → Descent-data-circle l1 → Descent-data-circle l1 →
+  UU l1
+Eq-Descent-data-circle P Q =
+  Σ ( (type-Descent-data-circle P) ≃ (type-Descent-data-circle Q))
     ( λ h →
-      ( (map-equiv h) ∘ (map-equiv (aut-Fam-circle P))) ~
-      ( (map-equiv (aut-Fam-circle Q)) ∘ (map-equiv h)))
-
-refl-Eq-Fam-circle :
-  { l1 : Level} (P : Fam-circle l1) → Eq-Fam-circle P P
-refl-Eq-Fam-circle (X , e) =
-  id-equiv , refl-htpy
-
-Eq-eq-Fam-circle :
-  { l1 : Level} (P Q : Fam-circle l1) → P ＝ Q → Eq-Fam-circle P Q
-Eq-eq-Fam-circle P .P refl = refl-Eq-Fam-circle P
-
-is-contr-total-Eq-Fam-circle :
-  { l1 : Level} (P : Fam-circle l1) →
-  is-contr (Σ (Fam-circle l1) (Eq-Fam-circle P))
-is-contr-total-Eq-Fam-circle (X , e) =
+      ( (map-equiv h) ∘ (map-equiv (aut-Descent-data-circle P))) ~
+      ( (map-equiv (aut-Descent-data-circle Q)) ∘ (map-equiv h)))
+
+refl-Eq-Descent-data-circle :
+  { l1 : Level} (P : Descent-data-circle l1) →
+  Eq-Descent-data-circle P P
+refl-Eq-Descent-data-circle (X , e) = id-equiv , refl-htpy
+
+Eq-eq-Descent-data-circle :
+  { l1 : Level} (P Q : Descent-data-circle l1) →
+  P ＝ Q → Eq-Descent-data-circle P Q
+Eq-eq-Descent-data-circle P .P refl = refl-Eq-Descent-data-circle P
+
+is-contr-total-Eq-Descent-data-circle :
+  { l1 : Level} (P : Descent-data-circle l1) →
+  is-contr (Σ (Descent-data-circle l1) (Eq-Descent-data-circle P))
+is-contr-total-Eq-Descent-data-circle (X , e) =
   is-contr-total-Eq-structure
     ( λ Y f h →
       ((map-equiv h) ∘ (map-equiv e)) ~ ((map-equiv f) ∘ (map-equiv h)))
@@ -84,107 +101,125 @@ is-contr-total-Eq-Fam-circle (X , e) =
     ( X , id-equiv)
   ( is-contr-total-htpy-equiv e)
 
-is-equiv-Eq-eq-Fam-circle :
-  { l1 : Level} (P Q : Fam-circle l1) → is-equiv (Eq-eq-Fam-circle P Q)
-is-equiv-Eq-eq-Fam-circle P =
+is-equiv-Eq-eq-Descent-data-circle :
+  { l1 : Level} (P Q : Descent-data-circle l1) →
+  is-equiv (Eq-eq-Descent-data-circle P Q)
+is-equiv-Eq-eq-Descent-data-circle P =
   fundamental-theorem-id
-    ( is-contr-total-Eq-Fam-circle P)
-    ( Eq-eq-Fam-circle P)
-
-eq-Eq-Fam-circle :
-  { l1 : Level} (P Q : Fam-circle l1) → Eq-Fam-circle P Q → P ＝ Q
-eq-Eq-Fam-circle P Q = map-inv-is-equiv (is-equiv-Eq-eq-Fam-circle P Q)
+    ( is-contr-total-Eq-Descent-data-circle P)
+    ( Eq-eq-Descent-data-circle P)
+
+eq-Eq-Descent-data-circle :
+  { l1 : Level} (P Q : Descent-data-circle l1) →
+  Eq-Descent-data-circle P Q → P ＝ Q
+eq-Eq-Descent-data-circle P Q =
+  map-inv-is-equiv (is-equiv-Eq-eq-Descent-data-circle P Q)
 ```
 
-### Uniqueness of type families defined by `Fam-circle`
+### Uniqueness of descent data characterizing a particular type family over the
+    circle
 
 ```agda
-comparison-Fam-circle :
-  ( l1 : Level) → free-loop (UU l1) → Fam-circle l1
-comparison-Fam-circle l1 = tot (λ Y → equiv-eq)
+comparison-Descent-data-circle :
+  ( l1 : Level) → free-loop (UU l1) → Descent-data-circle l1
+comparison-Descent-data-circle l1 = tot (λ Y → equiv-eq)
 
-is-equiv-comparison-Fam-circle :
-  ( l1 : Level) → is-equiv (comparison-Fam-circle l1)
-is-equiv-comparison-Fam-circle l1 =
+is-equiv-comparison-Descent-data-circle :
+  ( l1 : Level) → is-equiv (comparison-Descent-data-circle l1)
+is-equiv-comparison-Descent-data-circle l1 =
   is-equiv-tot-is-fiberwise-equiv (λ Y → univalence Y Y)
 
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
   where
 
-  ev-Fam-circle : ( X → UU l2) → Fam-circle l2
-  pr1 (ev-Fam-circle P) = P (base-free-loop l)
-  pr2 (ev-Fam-circle P) = equiv-tr P (loop-free-loop l)
-
-  triangle-comparison-Fam-circle :
-    ev-Fam-circle ~ ((comparison-Fam-circle l2) ∘ (ev-free-loop l (UU l2)))
-  triangle-comparison-Fam-circle P =
-    eq-Eq-Fam-circle
-      ( ev-Fam-circle P)
-      ( comparison-Fam-circle _ (ev-free-loop l (UU _) P))
+  ev-Descent-data-circle : ( X → UU l2) → Descent-data-circle l2
+  pr1 (ev-Descent-data-circle P) = P (base-free-loop l)
+  pr2 (ev-Descent-data-circle P) = equiv-tr P (loop-free-loop l)
+
+  triangle-comparison-Descent-data-circle :
+    ev-Descent-data-circle ~
+    ( (comparison-Descent-data-circle l2) ∘ (ev-free-loop l (UU l2)))
+  triangle-comparison-Descent-data-circle P =
+    eq-Eq-Descent-data-circle
+      ( ev-Descent-data-circle P)
+      ( comparison-Descent-data-circle _ (ev-free-loop l (UU _) P))
       ( id-equiv , (htpy-eq (inv (tr-equiv-eq-ap (loop-free-loop l)))))
 
-  is-equiv-ev-Fam-circle-universal-property-circle :
+  is-equiv-ev-Descent-data-circle-universal-property-circle :
     ( up-circle : universal-property-circle (lsuc l2) l) →
-    is-equiv ev-Fam-circle
-  is-equiv-ev-Fam-circle-universal-property-circle up-circle =
+    is-equiv ev-Descent-data-circle
+  is-equiv-ev-Descent-data-circle-universal-property-circle up-circle =
      is-equiv-comp-htpy
-      ( ev-Fam-circle)
-      ( comparison-Fam-circle l2)
+      ( ev-Descent-data-circle)
+      ( comparison-Descent-data-circle l2)
       ( ev-free-loop l (UU l2))
-      ( triangle-comparison-Fam-circle)
+      ( triangle-comparison-Descent-data-circle)
       ( up-circle (UU l2))
-      ( is-equiv-comparison-Fam-circle l2)
+      ( is-equiv-comparison-Descent-data-circle l2)
 
 unique-family-property-circle :
   { l1 : Level} (l2 : Level) {X : UU l1} (l : free-loop X) →
   UU (l1 ⊔ lsuc l2)
 unique-family-property-circle l2 {X} l =
-  ( Q : Fam-circle l2) →
-    is-contr (Σ (X → UU l2) (λ P → Eq-Fam-circle Q (ev-Fam-circle l P)))
+  ( Q : Descent-data-circle l2) →
+    is-contr
+    ( Σ (X → UU l2)
+        (λ P → Eq-Descent-data-circle Q (ev-Descent-data-circle l P)))
 
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
   where
 
   unique-family-property-universal-property-circle :
-    universal-property-circle (lsuc l2) l → unique-family-property-circle l2 l
+    universal-property-circle (lsuc l2) l →
+    unique-family-property-circle l2 l
   unique-family-property-universal-property-circle up-circle Q =
     is-contr-is-equiv'
-      ( fib (ev-Fam-circle l) Q)
-      ( tot (λ P → Eq-eq-Fam-circle Q (ev-Fam-circle l P) ∘ inv))
+      ( fib (ev-Descent-data-circle l) Q)
+      ( tot
+        ( λ P →
+          Eq-eq-Descent-data-circle Q (ev-Descent-data-circle l P) ∘
+          inv))
       ( is-equiv-tot-is-fiberwise-equiv
         ( λ P →
           is-equiv-comp _ _
             ( is-equiv-inv _ _)
-            ( is-equiv-Eq-eq-Fam-circle Q (ev-Fam-circle l P))))
+            ( is-equiv-Eq-eq-Descent-data-circle
+              ( Q)
+              ( ev-Descent-data-circle l P))))
       ( is-contr-map-is-equiv
-        ( is-equiv-ev-Fam-circle-universal-property-circle l up-circle)
+        ( is-equiv-ev-Descent-data-circle-universal-property-circle
+          ( l)
+          ( up-circle))
         ( Q))
 ```
 
-### Sections of families over the circle are exactly the fixed points of the associated automorphism
+### Sections of type families over the circle are exactly the fixpoints of the
+    automorphism from the characteristic descent data
 
 ```agda
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
-  ( Q : X → UU l2) (P : Fam-circle l2) (αβ : Eq-Fam-circle P (ev-Fam-circle l Q))
+  ( Q : X → UU l2) (P : Descent-data-circle l2)
+  ( αβ : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
   where
 
   private
-    α : type-Fam-circle P ≃ Q (base-free-loop l)
+    α : type-Descent-data-circle P ≃ Q (base-free-loop l)
     α = pr1 αβ
 
-  map-path-over-loop-fib-aut-Fam-circle :
-    (x y : type-Fam-circle P) → (map-equiv (aut-Fam-circle P) x ＝ y ) →
+  map-path-over-loop-fib-aut-Descent-data-circle :
+    ( x y : type-Descent-data-circle P) →
+    ( map-equiv (aut-Descent-data-circle P) x ＝ y ) →
     ( path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
-  map-path-over-loop-fib-aut-Fam-circle x y q =
+  map-path-over-loop-fib-aut-Descent-data-circle x y q =
     inv (pr2 αβ _) ∙ (ap (map-equiv α) q)
 
-  is-equiv-map-path-over-loop-fib-aut-Fam-circle :
-    ( x y : type-Fam-circle P) →
-    is-equiv (map-path-over-loop-fib-aut-Fam-circle x y)
-  is-equiv-map-path-over-loop-fib-aut-Fam-circle x y =
+  is-equiv-map-path-over-loop-fib-aut-Descent-data-circle :
+    ( x y : type-Descent-data-circle P) →
+    is-equiv (map-path-over-loop-fib-aut-Descent-data-circle x y)
+  is-equiv-map-path-over-loop-fib-aut-Descent-data-circle x y =
     fundamental-theorem-id
       ( is-contr-equiv'
         ( fib (map-equiv α) _)
@@ -192,71 +227,73 @@ module _
         ( is-contr-map-is-equiv
           ( is-equiv-map-equiv α)
           ( _)))
-      ( map-path-over-loop-fib-aut-Fam-circle x)
+      ( map-path-over-loop-fib-aut-Descent-data-circle x)
       ( _)
 
-  equiv-path-over-loop-fib-aut-Fam-circle :
-    (x y : type-Fam-circle P) →
-    (map-equiv (aut-Fam-circle P) x ＝ y) ≃
-    (path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
-  pr1 (equiv-path-over-loop-fib-aut-Fam-circle x y) =
-    map-path-over-loop-fib-aut-Fam-circle x y
-  pr2 (equiv-path-over-loop-fib-aut-Fam-circle x y) =
-    is-equiv-map-path-over-loop-fib-aut-Fam-circle x y
+  equiv-path-over-loop-fib-aut-Descent-data-circle :
+    ( x y : type-Descent-data-circle P) →
+    ( map-equiv (aut-Descent-data-circle P) x ＝ y) ≃
+    ( path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
+  pr1 (equiv-path-over-loop-fib-aut-Descent-data-circle x y) =
+    map-path-over-loop-fib-aut-Descent-data-circle x y
+  pr2 (equiv-path-over-loop-fib-aut-Descent-data-circle x y) =
+    is-equiv-map-path-over-loop-fib-aut-Descent-data-circle x y
 ```
 
 ```agda
-Section-Fam-circle :
-  { l1 l2 : Level} {X : UU l1} (l : free-loop X) (P : Fam-circle l2) → UU _
-Section-Fam-circle l P =
-  Σ (type-Fam-circle P) (λ p → (map-equiv (aut-Fam-circle P) p) ＝ p)
-
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
-  ( Q : X → UU l2) (P : Fam-circle l2)
-  ( αβ : Eq-Fam-circle P (ev-Fam-circle l Q))
+  ( Q : X → UU l2) (P : Descent-data-circle l2)
+  ( αβ : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
   where
 
   private
-    α : type-Fam-circle P ≃ Q (base-free-loop l)
+    α : type-Descent-data-circle P ≃ Q (base-free-loop l)
     α = pr1 αβ
 
-  ev-Section-Fam-circle :
-    ( (x : X) → Q x) → Section-Fam-circle l P
-  pr1 (ev-Section-Fam-circle s) =
+  ev-fixpoint-Descent-data-circle :
+    ( (x : X) → Q x) → fixpoint-Descent-data-circle l P
+  pr1 (ev-fixpoint-Descent-data-circle s) =
     map-inv-equiv
       ( α)
       ( s (base-free-loop l))
-  pr2 (ev-Section-Fam-circle s) =
+  pr2 (ev-fixpoint-Descent-data-circle s) =
     map-inv-is-equiv
-      ( is-equiv-map-path-over-loop-fib-aut-Fam-circle l Q P αβ _ _)
+      ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αβ _ _)
       ( ( ap (tr Q (loop-free-loop l)) (issec-map-inv-equiv α _)) ∙
         ( ( apd s (loop-free-loop l)) ∙
           ( inv (issec-map-inv-equiv α _))))
 
-  equiv-Section-Fam-circle-free-dependent-loop :
-    Section-Fam-circle l P ≃ free-dependent-loop l Q
-  equiv-Section-Fam-circle-free-dependent-loop =
-    equiv-Σ _ α (λ x → equiv-path-over-loop-fib-aut-Fam-circle l Q P αβ x x)
+  equiv-fixpoint-Descent-data-circle-free-dependent-loop :
+    fixpoint-Descent-data-circle l P ≃ free-dependent-loop l Q
+  equiv-fixpoint-Descent-data-circle-free-dependent-loop =
+    equiv-Σ
+      ( _)
+      ( α)
+      ( λ x →
+        equiv-path-over-loop-fib-aut-Descent-data-circle l Q P αβ x x)
 
-  comparison-Section-Fam-circle :
-    Section-Fam-circle l P → free-dependent-loop l Q
-  comparison-Section-Fam-circle =
-    map-equiv equiv-Section-Fam-circle-free-dependent-loop
+  comparison-fixpoint-Descent-data-circle :
+    fixpoint-Descent-data-circle l P → free-dependent-loop l Q
+  comparison-fixpoint-Descent-data-circle =
+    map-equiv equiv-fixpoint-Descent-data-circle-free-dependent-loop
 
-  triangle-comparison-Section-Fam-circle :
+  triangle-comparison-fixpoint-Descent-data-circle :
     ( ev-free-loop-Π l Q) ~
-    ( comparison-Section-Fam-circle ∘ ev-Section-Fam-circle)
-  triangle-comparison-Section-Fam-circle s =
+    ( comparison-fixpoint-Descent-data-circle ∘
+      ev-fixpoint-Descent-data-circle)
+  triangle-comparison-fixpoint-Descent-data-circle s =
     eq-Eq-free-dependent-loop l Q
       ( ev-free-loop-Π l Q s)
-      ( ( comparison-Section-Fam-circle ∘ ev-Section-Fam-circle) s)
+      ( ( comparison-fixpoint-Descent-data-circle ∘
+          ev-fixpoint-Descent-data-circle)
+        ( s))
       ( inv issec-inv-α ,
         inv
         ( ( horizontal-concat-Id²
             ( refl {x = ap _ (inv issec-inv-α)})
             ( issec-map-inv-is-equiv
-              ( is-equiv-map-path-over-loop-fib-aut-Fam-circle l Q P αβ _ _)
+              ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αβ _ _)
               ( _))) ∙
           ( ( inv (assoc (ap _ (inv issec-inv-α)) _ _)) ∙
             ( horizontal-concat-Id²
@@ -271,30 +308,32 @@ module _
     issec-inv-α : eq-value (map-equiv α ∘ map-inv-equiv α) id (s (base-free-loop l))
     issec-inv-α = issec-map-inv-equiv α _
 
-  is-equiv-comparison-Section-Fam-circle :
-    is-equiv comparison-Section-Fam-circle
-  is-equiv-comparison-Section-Fam-circle =
-    is-equiv-map-equiv equiv-Section-Fam-circle-free-dependent-loop
+  is-equiv-comparison-fixpoint-Descent-data-circle :
+    is-equiv comparison-fixpoint-Descent-data-circle
+  is-equiv-comparison-fixpoint-Descent-data-circle =
+    is-equiv-map-equiv equiv-fixpoint-Descent-data-circle-free-dependent-loop
 
-  is-equiv-ev-Section-Fam-circle :
-    (dependent-universal-property-circle l2 l) →
-    is-equiv ev-Section-Fam-circle
-  is-equiv-ev-Section-Fam-circle dup =
+  is-equiv-ev-fixpoint-Descent-data-circle :
+    ( dependent-universal-property-circle l2 l) →
+    is-equiv ev-fixpoint-Descent-data-circle
+  is-equiv-ev-fixpoint-Descent-data-circle dup =
     is-equiv-right-factor-htpy
       ( ev-free-loop-Π l Q)
-      ( comparison-Section-Fam-circle)
-      ( ev-Section-Fam-circle)
-      ( triangle-comparison-Section-Fam-circle)
-      ( is-equiv-comparison-Section-Fam-circle)
+      ( comparison-fixpoint-Descent-data-circle)
+      ( ev-fixpoint-Descent-data-circle)
+      ( triangle-comparison-fixpoint-Descent-data-circle)
+      ( is-equiv-comparison-fixpoint-Descent-data-circle)
       ( dup Q)
 
-  equiv-ev-Section-Fam-circle :
-    (dependent-universal-property-circle l2 l) →
-    ((x : X) → Q x) ≃ (Section-Fam-circle l P)
-  pr1 (equiv-ev-Section-Fam-circle dup) = ev-Section-Fam-circle
-  pr2 (equiv-ev-Section-Fam-circle dup) = is-equiv-ev-Section-Fam-circle dup
+  equiv-ev-fixpoint-Descent-data-circle :
+    ( dependent-universal-property-circle l2 l) →
+    ( (x : X) → Q x) ≃ (fixpoint-Descent-data-circle l P)
+  pr1 (equiv-ev-fixpoint-Descent-data-circle dup) =
+    ev-fixpoint-Descent-data-circle
+  pr2 (equiv-ev-fixpoint-Descent-data-circle dup) =
+    is-equiv-ev-fixpoint-Descent-data-circle dup
 
-  compute-ev-Section-Fam-circle :
-    ( pr1 ∘ ev-Section-Fam-circle ) ~
+  compute-ev-fixpoint-Descent-data-circle :
+    ( pr1 ∘ ev-fixpoint-Descent-data-circle ) ~
     ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) _))
-  compute-ev-Section-Fam-circle = refl-htpy
+  compute-ev-fixpoint-Descent-data-circle = refl-htpy
diff --git a/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md b/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
index 18fb7ab0c8..866f534ef2 100644
--- a/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
@@ -144,7 +144,10 @@ abstract
     { l1 : Level} {X : UU l1} (l : free-loop X) →
     ( {k : Level} → dependent-universal-property-circle k l) →
     Σ ( X → UU lzero)
-      ( λ P → Eq-Fam-circle (pair ℤ equiv-succ-ℤ) (ev-Fam-circle l P))
+      ( λ P →
+        Eq-Descent-data-circle
+        ( pair ℤ equiv-succ-ℤ)
+        ( ev-Descent-data-circle l P))
   Fundamental-cover-circle {l1} l dup-circle =
     center
       ( unique-family-property-universal-property-circle l

From 7e7d4b15bd80ee38ea33624ee2423d277162e76b Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Tue, 21 Mar 2023 17:42:50 +0100
Subject: [PATCH 05/13] Naming

---
 .../descent-circle.lagda.md                        | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 17af65784d..14cfcf15d5 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -133,7 +133,7 @@ module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
   where
 
-  ev-Descent-data-circle : ( X → UU l2) → Descent-data-circle l2
+  ev-Descent-data-circle : (X → UU l2) → Descent-data-circle l2
   pr1 (ev-Descent-data-circle P) = P (base-free-loop l)
   pr2 (ev-Descent-data-circle P) = equiv-tr P (loop-free-loop l)
 
@@ -143,7 +143,7 @@ module _
   triangle-comparison-Descent-data-circle P =
     eq-Eq-Descent-data-circle
       ( ev-Descent-data-circle P)
-      ( comparison-Descent-data-circle _ (ev-free-loop l (UU _) P))
+      ( comparison-Descent-data-circle _ (ev-free-loop l (UU l2) P))
       ( id-equiv , (htpy-eq (inv (tr-equiv-eq-ap (loop-free-loop l)))))
 
   is-equiv-ev-Descent-data-circle-universal-property-circle :
@@ -316,22 +316,22 @@ module _
   is-equiv-ev-fixpoint-Descent-data-circle :
     ( dependent-universal-property-circle l2 l) →
     is-equiv ev-fixpoint-Descent-data-circle
-  is-equiv-ev-fixpoint-Descent-data-circle dup =
+  is-equiv-ev-fixpoint-Descent-data-circle dup-circle =
     is-equiv-right-factor-htpy
       ( ev-free-loop-Π l Q)
       ( comparison-fixpoint-Descent-data-circle)
       ( ev-fixpoint-Descent-data-circle)
       ( triangle-comparison-fixpoint-Descent-data-circle)
       ( is-equiv-comparison-fixpoint-Descent-data-circle)
-      ( dup Q)
+      ( dup-circle Q)
 
   equiv-ev-fixpoint-Descent-data-circle :
     ( dependent-universal-property-circle l2 l) →
     ( (x : X) → Q x) ≃ (fixpoint-Descent-data-circle l P)
-  pr1 (equiv-ev-fixpoint-Descent-data-circle dup) =
+  pr1 (equiv-ev-fixpoint-Descent-data-circle dup-circle) =
     ev-fixpoint-Descent-data-circle
-  pr2 (equiv-ev-fixpoint-Descent-data-circle dup) =
-    is-equiv-ev-fixpoint-Descent-data-circle dup
+  pr2 (equiv-ev-fixpoint-Descent-data-circle dup-circle) =
+    is-equiv-ev-fixpoint-Descent-data-circle dup-circle
 
   compute-ev-fixpoint-Descent-data-circle :
     ( pr1 ∘ ev-fixpoint-Descent-data-circle ) ~

From ab6df8f8e042926c93dbc5512eb2bb0c6bd1e363 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 22 Mar 2023 14:47:11 +0100
Subject: [PATCH 06/13] Formatting

---
 src/synthetic-homotopy-theory/descent-circle.lagda.md | 9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 14cfcf15d5..2d96a2c27c 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -20,8 +20,8 @@ open import foundation.functoriality-dependent-pair-types
 open import foundation.fundamental-theorem-of-identity-types
 open import foundation.homotopies
 open import foundation.identity-types
-open import foundation.structure-identity-principle
 open import foundation.path-algebra
+open import foundation.structure-identity-principle
 open import foundation.univalence
 open import foundation.universe-levels
 
@@ -116,8 +116,7 @@ eq-Eq-Descent-data-circle P Q =
   map-inv-is-equiv (is-equiv-Eq-eq-Descent-data-circle P Q)
 ```
 
-### Uniqueness of descent data characterizing a particular type family over the
-    circle
+### Uniqueness of descent data characterizing a particular type family over the circle
 
 ```agda
 comparison-Descent-data-circle :
@@ -195,8 +194,7 @@ module _
         ( Q))
 ```
 
-### Sections of type families over the circle are exactly the fixpoints of the
-    automorphism from the characteristic descent data
+### Sections of type families over the circle are exactly the fixpoints of the automorphism from the characteristic descent data
 
 ```agda
 module _
@@ -337,3 +335,4 @@ module _
     ( pr1 ∘ ev-fixpoint-Descent-data-circle ) ~
     ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) _))
   compute-ev-fixpoint-Descent-data-circle = refl-htpy
+```

From 73c6afe831f4a78de705767b8d6852b582e6d750 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Sun, 26 Mar 2023 23:29:48 +0200
Subject: [PATCH 07/13] Characterize families of functions over the circle

---
 .../commuting-squares-of-maps.lagda.md        |  26 +++++
 src/foundation/identity-types.lagda.md        |  13 +--
 .../descent-circle.lagda.md                   | 109 ++++++++++++++++--
 3 files changed, 133 insertions(+), 15 deletions(-)

diff --git a/src/foundation/commuting-squares-of-maps.lagda.md b/src/foundation/commuting-squares-of-maps.lagda.md
index e34557a2e0..ec1d8f7a52 100644
--- a/src/foundation/commuting-squares-of-maps.lagda.md
+++ b/src/foundation/commuting-squares-of-maps.lagda.md
@@ -41,4 +41,30 @@ coherence-square-inv-vertical :
 coherence-square-inv-vertical top left right bottom H x =
   map-eq-transpose-equiv right
     ( inv (H (map-inv-equiv left x)) ∙ ap bottom (issec-map-inv-equiv left x))
+
+coherence-square-inv-all :
+  {l1 l2 l3 l4 : Level} {A : UU l1} {B : UU l2} {X : UU l3} {Y : UU l4}
+  (top : A ≃ B) (left : A ≃ X) (right : B ≃ Y) (bottom : X ≃ Y) →
+  coherence-square-maps
+    ( map-equiv top)
+    ( map-equiv left)
+    ( map-equiv right)
+    ( map-equiv bottom) →
+  coherence-square-maps
+    ( map-inv-equiv bottom)
+    ( map-inv-equiv right)
+    ( map-inv-equiv left)
+    ( map-inv-equiv top)
+coherence-square-inv-all top left right bottom H =
+  coherence-square-inv-vertical
+    ( map-inv-equiv top)
+    ( right)
+    ( left)
+    ( map-inv-equiv bottom)
+    ( coherence-square-inv-horizontal
+      ( top)
+      ( map-equiv left)
+      ( map-equiv right)
+      ( bottom)
+      ( H))
 ```
diff --git a/src/foundation/identity-types.lagda.md b/src/foundation/identity-types.lagda.md
index 7216769e85..cde7828d3b 100644
--- a/src/foundation/identity-types.lagda.md
+++ b/src/foundation/identity-types.lagda.md
@@ -170,13 +170,12 @@ module _
   issec-inv-tr : (p : x ＝ y) → ((tr B p) ∘ (inv-tr p)) ~ id
   issec-inv-tr refl b = refl
 
-  abstract
-    is-equiv-tr : (p : x ＝ y) → is-equiv (tr B p)
-    is-equiv-tr p =
-      is-equiv-has-inverse
-        ( inv-tr p)
-        ( issec-inv-tr p)
-        ( isretr-inv-tr p)
+  is-equiv-tr : (p : x ＝ y) → is-equiv (tr B p)
+  is-equiv-tr p =
+    is-equiv-has-inverse
+      ( inv-tr p)
+      ( issec-inv-tr p)
+      ( isretr-inv-tr p)
 
   equiv-tr : x ＝ y → (B x) ≃ (B y)
   pr1 (equiv-tr p) = tr B p
diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 2d96a2c27c..5b739505c4 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -8,6 +8,8 @@ module synthetic-homotopy-theory.descent-circle where
 
 ```agda
 open import foundation.automorphisms
+open import foundation.commuting-squares-of-maps
+open import foundation.commuting-triangles-of-maps
 open import foundation.contractible-maps
 open import foundation.contractible-types
 open import foundation.dependent-pair-types
@@ -17,11 +19,13 @@ open import foundation.fibers-of-maps
 open import foundation.function-extensionality
 open import foundation.functions
 open import foundation.functoriality-dependent-pair-types
+open import foundation.functoriality-function-types
 open import foundation.fundamental-theorem-of-identity-types
 open import foundation.homotopies
 open import foundation.identity-types
 open import foundation.path-algebra
 open import foundation.structure-identity-principle
+open import foundation.transport
 open import foundation.univalence
 open import foundation.universe-levels
 
@@ -66,6 +70,18 @@ fixpoint-Descent-data-circle l P =
     ( λ p → (map-equiv (aut-Descent-data-circle P) p) ＝ p)
 ```
 
+### Homomorphisms between descent data for the circle
+
+```agda
+hom-Descent-data-circle :
+  { l1 l2 l3 : Level} {X : UU l1} (l : free-loop X)
+  ( P : Descent-data-circle l2) (Q : Descent-data-circle l3) →
+  UU (l2 ⊔ l3)
+hom-Descent-data-circle _ (Y , e) (Z , f) =
+  Σ ( Y → Z)
+    ( λ h → (h ∘ (map-equiv e)) ~ ((map-equiv f) ∘ h))
+```
+
 ## Properties
 
 ### Characterization of the identity type of descent data for the circle
@@ -200,19 +216,19 @@ module _
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
   ( Q : X → UU l2) (P : Descent-data-circle l2)
-  ( αβ : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
+  ( αH : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
   where
 
   private
     α : type-Descent-data-circle P ≃ Q (base-free-loop l)
-    α = pr1 αβ
+    α = pr1 αH
 
   map-path-over-loop-fib-aut-Descent-data-circle :
     ( x y : type-Descent-data-circle P) →
     ( map-equiv (aut-Descent-data-circle P) x ＝ y ) →
     ( path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
   map-path-over-loop-fib-aut-Descent-data-circle x y q =
-    inv (pr2 αβ _) ∙ (ap (map-equiv α) q)
+    inv (pr2 αH _) ∙ (ap (map-equiv α) q)
 
   is-equiv-map-path-over-loop-fib-aut-Descent-data-circle :
     ( x y : type-Descent-data-circle P) →
@@ -242,12 +258,12 @@ module _
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
   ( Q : X → UU l2) (P : Descent-data-circle l2)
-  ( αβ : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
+  ( αH : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
   where
 
   private
     α : type-Descent-data-circle P ≃ Q (base-free-loop l)
-    α = pr1 αβ
+    α = pr1 αH
 
   ev-fixpoint-Descent-data-circle :
     ( (x : X) → Q x) → fixpoint-Descent-data-circle l P
@@ -257,7 +273,7 @@ module _
       ( s (base-free-loop l))
   pr2 (ev-fixpoint-Descent-data-circle s) =
     map-inv-is-equiv
-      ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αβ _ _)
+      ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αH _ _)
       ( ( ap (tr Q (loop-free-loop l)) (issec-map-inv-equiv α _)) ∙
         ( ( apd s (loop-free-loop l)) ∙
           ( inv (issec-map-inv-equiv α _))))
@@ -269,7 +285,7 @@ module _
       ( _)
       ( α)
       ( λ x →
-        equiv-path-over-loop-fib-aut-Descent-data-circle l Q P αβ x x)
+        equiv-path-over-loop-fib-aut-Descent-data-circle l Q P αH x x)
 
   comparison-fixpoint-Descent-data-circle :
     fixpoint-Descent-data-circle l P → free-dependent-loop l Q
@@ -291,7 +307,7 @@ module _
         ( ( horizontal-concat-Id²
             ( refl {x = ap _ (inv issec-inv-α)})
             ( issec-map-inv-is-equiv
-              ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αβ _ _)
+              ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αH _ _)
               ( _))) ∙
           ( ( inv (assoc (ap _ (inv issec-inv-α)) _ _)) ∙
             ( horizontal-concat-Id²
@@ -336,3 +352,80 @@ module _
     ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) _))
   compute-ev-fixpoint-Descent-data-circle = refl-htpy
 ```
+
+### Families of maps over the circle are maps commuting with the respective automorphisms
+
+```agda
+module _
+  { l1 l2 l3 : Level} {X : UU l1} (l : free-loop X)
+  ( A : X → UU l2) (P : Descent-data-circle l2)
+  ( αH : Eq-Descent-data-circle P (ev-Descent-data-circle l A))
+  ( B : X → UU l3) (Q : Descent-data-circle l3)
+  ( βK : Eq-Descent-data-circle Q (ev-Descent-data-circle l B))
+  where
+
+  private
+    Y : UU l2
+    Y = type-Descent-data-circle P
+    e : Aut Y
+    e = aut-Descent-data-circle P
+    Z : UU l3
+    Z = type-Descent-data-circle Q
+    f : Aut Z
+    f = aut-Descent-data-circle Q
+
+    α : Y ≃ A (base-free-loop l)
+    α = pr1 αH
+    β : Z ≃ B (base-free-loop l)
+    β = pr1 βK
+
+  Descent-data-circle-function-type : Descent-data-circle (l2 ⊔ l3)
+  pr1 Descent-data-circle-function-type =
+    Y → Z
+  pr2 Descent-data-circle-function-type =
+    (equiv-postcomp _ f) ∘e (equiv-precomp (inv-equiv e) _)
+
+  eq-Descent-data-circle-function-type :
+    Eq-Descent-data-circle
+      ( Descent-data-circle-function-type)
+      ( ev-Descent-data-circle l (λ s → (A s → B s)))
+  pr1 eq-Descent-data-circle-function-type =
+    (equiv-postcomp _ β) ∘e (equiv-precomp (inv-equiv α) _)
+  pr2 eq-Descent-data-circle-function-type h =
+    ( eq-htpy
+      ( htpy-comp-horizontal
+        ( h ·l
+          inv-htpy
+            ( coherence-square-inv-all
+              ( α)
+              ( e)
+              ( equiv-tr A (loop-free-loop l))
+              ( α)
+              ( pr2 αH)))
+        ( pr2 βK))) ∙
+    ( inv
+      ( ( tr-function-type A B (loop-free-loop l))
+        ( map-equiv (pr1 eq-Descent-data-circle-function-type) h)))
+
+  equiv-fixpoint-Descent-data-circle-function-type-hom :
+    fixpoint-Descent-data-circle l Descent-data-circle-function-type ≃
+    hom-Descent-data-circle l P Q
+  equiv-fixpoint-Descent-data-circle-function-type-hom =
+    equiv-tot
+      (λ h →
+        ( equiv-inv-htpy _ _) ∘e
+        ( ( inv-equiv (equiv-coherence-triangle-maps-inv-top _ _ e)) ∘e
+          ( equiv-funext)))
+
+  equiv-ev-Descent-data-circle-function-type-hom :
+    dependent-universal-property-circle (l2 ⊔ l3) l →
+    ((s : X) → A s → B s) ≃ (hom-Descent-data-circle l P Q)
+  equiv-ev-Descent-data-circle-function-type-hom dup-circle =
+    equiv-fixpoint-Descent-data-circle-function-type-hom ∘e
+    ( equiv-ev-fixpoint-Descent-data-circle
+      ( l)
+      ( λ s → A s → B s)
+      ( Descent-data-circle-function-type)
+      ( eq-Descent-data-circle-function-type)
+      ( dup-circle))
+```

From e33007f31ae8c54b82609f8d813bbdc96cf96675 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 29 Mar 2023 15:50:33 +0200
Subject: [PATCH 08/13] Make universe level explicit

---
 src/synthetic-homotopy-theory/descent-circle.lagda.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 5b739505c4..018f1a8aa1 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -64,7 +64,7 @@ module _
 ```agda
 fixpoint-Descent-data-circle :
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
-  ( P : Descent-data-circle l2) → UU _
+  ( P : Descent-data-circle l2) → UU l2
 fixpoint-Descent-data-circle l P =
   Σ ( type-Descent-data-circle P)
     ( λ p → (map-equiv (aut-Descent-data-circle P) p) ＝ p)

From 5238795490b6c89f14ed7c687a8ee2b6561dc5be Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 29 Mar 2023 17:10:24 +0200
Subject: [PATCH 09/13] Naming

---
 .../descent-circle.lagda.md                   | 342 +++++++++---------
 .../universal-cover-circle.lagda.md           |   4 +-
 2 files changed, 173 insertions(+), 173 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 018f1a8aa1..d0b566cbbc 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -44,40 +44,40 @@ The descent property uniquely characterizes type families over the circle.
 ### Descent data for the circle
 
 ```agda
-Descent-data-circle :
+descent-data-circle :
   ( l1 : Level) → UU (lsuc l1)
-Descent-data-circle l1 = Σ (UU l1) Aut
+descent-data-circle l1 = Σ (UU l1) Aut
 
 module _
-  { l1 : Level} (P : Descent-data-circle l1)
+  { l1 : Level} (P : descent-data-circle l1)
   where
 
-  type-Descent-data-circle : UU l1
-  type-Descent-data-circle = pr1 P
+  type-descent-data-circle : UU l1
+  type-descent-data-circle = pr1 P
 
-  aut-Descent-data-circle : Aut type-Descent-data-circle
-  aut-Descent-data-circle = pr2 P
+  aut-descent-data-circle : Aut type-descent-data-circle
+  aut-descent-data-circle = pr2 P
 ```
 
 ### Fixpoints of the descent data
 
 ```agda
-fixpoint-Descent-data-circle :
+fixpoint-descent-data-circle :
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
-  ( P : Descent-data-circle l2) → UU l2
-fixpoint-Descent-data-circle l P =
-  Σ ( type-Descent-data-circle P)
-    ( λ p → (map-equiv (aut-Descent-data-circle P) p) ＝ p)
+  ( P : descent-data-circle l2) → UU l2
+fixpoint-descent-data-circle l P =
+  Σ ( type-descent-data-circle P)
+    ( λ p → (map-equiv (aut-descent-data-circle P) p) ＝ p)
 ```
 
 ### Homomorphisms between descent data for the circle
 
 ```agda
-hom-Descent-data-circle :
+hom-descent-data-circle :
   { l1 l2 l3 : Level} {X : UU l1} (l : free-loop X)
-  ( P : Descent-data-circle l2) (Q : Descent-data-circle l3) →
+  ( P : descent-data-circle l2) (Q : descent-data-circle l3) →
   UU (l2 ⊔ l3)
-hom-Descent-data-circle _ (Y , e) (Z , f) =
+hom-descent-data-circle _ (Y , e) (Z , f) =
   Σ ( Y → Z)
     ( λ h → (h ∘ (map-equiv e)) ~ ((map-equiv f) ∘ h))
 ```
@@ -87,29 +87,29 @@ hom-Descent-data-circle _ (Y , e) (Z , f) =
 ### Characterization of the identity type of descent data for the circle
 
 ```agda
-Eq-Descent-data-circle :
-  { l1 : Level} → Descent-data-circle l1 → Descent-data-circle l1 →
+Eq-descent-data-circle :
+  { l1 : Level} → descent-data-circle l1 → descent-data-circle l1 →
   UU l1
-Eq-Descent-data-circle P Q =
-  Σ ( (type-Descent-data-circle P) ≃ (type-Descent-data-circle Q))
+Eq-descent-data-circle P Q =
+  Σ ( (type-descent-data-circle P) ≃ (type-descent-data-circle Q))
     ( λ h →
-      ( (map-equiv h) ∘ (map-equiv (aut-Descent-data-circle P))) ~
-      ( (map-equiv (aut-Descent-data-circle Q)) ∘ (map-equiv h)))
-
-refl-Eq-Descent-data-circle :
-  { l1 : Level} (P : Descent-data-circle l1) →
-  Eq-Descent-data-circle P P
-refl-Eq-Descent-data-circle (X , e) = id-equiv , refl-htpy
-
-Eq-eq-Descent-data-circle :
-  { l1 : Level} (P Q : Descent-data-circle l1) →
-  P ＝ Q → Eq-Descent-data-circle P Q
-Eq-eq-Descent-data-circle P .P refl = refl-Eq-Descent-data-circle P
-
-is-contr-total-Eq-Descent-data-circle :
-  { l1 : Level} (P : Descent-data-circle l1) →
-  is-contr (Σ (Descent-data-circle l1) (Eq-Descent-data-circle P))
-is-contr-total-Eq-Descent-data-circle (X , e) =
+      ( (map-equiv h) ∘ (map-equiv (aut-descent-data-circle P))) ~
+      ( (map-equiv (aut-descent-data-circle Q)) ∘ (map-equiv h)))
+
+refl-Eq-descent-data-circle :
+  { l1 : Level} (P : descent-data-circle l1) →
+  Eq-descent-data-circle P P
+refl-Eq-descent-data-circle (X , e) = id-equiv , refl-htpy
+
+Eq-eq-descent-data-circle :
+  { l1 : Level} (P Q : descent-data-circle l1) →
+  P ＝ Q → Eq-descent-data-circle P Q
+Eq-eq-descent-data-circle P .P refl = refl-Eq-descent-data-circle P
+
+is-contr-total-Eq-descent-data-circle :
+  { l1 : Level} (P : descent-data-circle l1) →
+  is-contr (Σ (descent-data-circle l1) (Eq-descent-data-circle P))
+is-contr-total-Eq-descent-data-circle (X , e) =
   is-contr-total-Eq-structure
     ( λ Y f h →
       ((map-equiv h) ∘ (map-equiv e)) ~ ((map-equiv f) ∘ (map-equiv h)))
@@ -117,70 +117,70 @@ is-contr-total-Eq-Descent-data-circle (X , e) =
     ( X , id-equiv)
   ( is-contr-total-htpy-equiv e)
 
-is-equiv-Eq-eq-Descent-data-circle :
-  { l1 : Level} (P Q : Descent-data-circle l1) →
-  is-equiv (Eq-eq-Descent-data-circle P Q)
-is-equiv-Eq-eq-Descent-data-circle P =
+is-equiv-Eq-eq-descent-data-circle :
+  { l1 : Level} (P Q : descent-data-circle l1) →
+  is-equiv (Eq-eq-descent-data-circle P Q)
+is-equiv-Eq-eq-descent-data-circle P =
   fundamental-theorem-id
-    ( is-contr-total-Eq-Descent-data-circle P)
-    ( Eq-eq-Descent-data-circle P)
-
-eq-Eq-Descent-data-circle :
-  { l1 : Level} (P Q : Descent-data-circle l1) →
-  Eq-Descent-data-circle P Q → P ＝ Q
-eq-Eq-Descent-data-circle P Q =
-  map-inv-is-equiv (is-equiv-Eq-eq-Descent-data-circle P Q)
+    ( is-contr-total-Eq-descent-data-circle P)
+    ( Eq-eq-descent-data-circle P)
+
+eq-Eq-descent-data-circle :
+  { l1 : Level} (P Q : descent-data-circle l1) →
+  Eq-descent-data-circle P Q → P ＝ Q
+eq-Eq-descent-data-circle P Q =
+  map-inv-is-equiv (is-equiv-Eq-eq-descent-data-circle P Q)
 ```
 
 ### Uniqueness of descent data characterizing a particular type family over the circle
 
 ```agda
-comparison-Descent-data-circle :
-  ( l1 : Level) → free-loop (UU l1) → Descent-data-circle l1
-comparison-Descent-data-circle l1 = tot (λ Y → equiv-eq)
+comparison-descent-data-circle :
+  ( l1 : Level) → free-loop (UU l1) → descent-data-circle l1
+comparison-descent-data-circle l1 = tot (λ Y → equiv-eq)
 
-is-equiv-comparison-Descent-data-circle :
-  ( l1 : Level) → is-equiv (comparison-Descent-data-circle l1)
-is-equiv-comparison-Descent-data-circle l1 =
+is-equiv-comparison-descent-data-circle :
+  ( l1 : Level) → is-equiv (comparison-descent-data-circle l1)
+is-equiv-comparison-descent-data-circle l1 =
   is-equiv-tot-is-fiberwise-equiv (λ Y → univalence Y Y)
 
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
   where
 
-  ev-Descent-data-circle : (X → UU l2) → Descent-data-circle l2
-  pr1 (ev-Descent-data-circle P) = P (base-free-loop l)
-  pr2 (ev-Descent-data-circle P) = equiv-tr P (loop-free-loop l)
-
-  triangle-comparison-Descent-data-circle :
-    ev-Descent-data-circle ~
-    ( (comparison-Descent-data-circle l2) ∘ (ev-free-loop l (UU l2)))
-  triangle-comparison-Descent-data-circle P =
-    eq-Eq-Descent-data-circle
-      ( ev-Descent-data-circle P)
-      ( comparison-Descent-data-circle _ (ev-free-loop l (UU l2) P))
+  ev-descent-data-circle : (X → UU l2) → descent-data-circle l2
+  pr1 (ev-descent-data-circle P) = P (base-free-loop l)
+  pr2 (ev-descent-data-circle P) = equiv-tr P (loop-free-loop l)
+
+  triangle-comparison-descent-data-circle :
+    ev-descent-data-circle ~
+    ( (comparison-descent-data-circle l2) ∘ (ev-free-loop l (UU l2)))
+  triangle-comparison-descent-data-circle P =
+    eq-Eq-descent-data-circle
+      ( ev-descent-data-circle P)
+      ( comparison-descent-data-circle _ (ev-free-loop l (UU l2) P))
       ( id-equiv , (htpy-eq (inv (tr-equiv-eq-ap (loop-free-loop l)))))
 
-  is-equiv-ev-Descent-data-circle-universal-property-circle :
+  is-equiv-ev-descent-data-circle-universal-property-circle :
     ( up-circle : universal-property-circle (lsuc l2) l) →
-    is-equiv ev-Descent-data-circle
-  is-equiv-ev-Descent-data-circle-universal-property-circle up-circle =
+    is-equiv ev-descent-data-circle
+  is-equiv-ev-descent-data-circle-universal-property-circle up-circle =
      is-equiv-comp-htpy
-      ( ev-Descent-data-circle)
-      ( comparison-Descent-data-circle l2)
+      ( ev-descent-data-circle)
+      ( comparison-descent-data-circle l2)
       ( ev-free-loop l (UU l2))
-      ( triangle-comparison-Descent-data-circle)
+      ( triangle-comparison-descent-data-circle)
       ( up-circle (UU l2))
-      ( is-equiv-comparison-Descent-data-circle l2)
+      ( is-equiv-comparison-descent-data-circle l2)
 
 unique-family-property-circle :
   { l1 : Level} (l2 : Level) {X : UU l1} (l : free-loop X) →
   UU (l1 ⊔ lsuc l2)
 unique-family-property-circle l2 {X} l =
-  ( Q : Descent-data-circle l2) →
+  ( Q : descent-data-circle l2) →
     is-contr
     ( Σ (X → UU l2)
-        (λ P → Eq-Descent-data-circle Q (ev-Descent-data-circle l P)))
+        (λ P → Eq-descent-data-circle Q (ev-descent-data-circle l P)))
 
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
@@ -191,20 +191,20 @@ module _
     unique-family-property-circle l2 l
   unique-family-property-universal-property-circle up-circle Q =
     is-contr-is-equiv'
-      ( fib (ev-Descent-data-circle l) Q)
+      ( fib (ev-descent-data-circle l) Q)
       ( tot
         ( λ P →
-          Eq-eq-Descent-data-circle Q (ev-Descent-data-circle l P) ∘
+          Eq-eq-descent-data-circle Q (ev-descent-data-circle l P) ∘
           inv))
       ( is-equiv-tot-is-fiberwise-equiv
         ( λ P →
           is-equiv-comp _ _
             ( is-equiv-inv _ _)
-            ( is-equiv-Eq-eq-Descent-data-circle
+            ( is-equiv-Eq-eq-descent-data-circle
               ( Q)
-              ( ev-Descent-data-circle l P))))
+              ( ev-descent-data-circle l P))))
       ( is-contr-map-is-equiv
-        ( is-equiv-ev-Descent-data-circle-universal-property-circle
+        ( is-equiv-ev-descent-data-circle-universal-property-circle
           ( l)
           ( up-circle))
         ( Q))
@@ -215,25 +215,25 @@ module _
 ```agda
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
-  ( Q : X → UU l2) (P : Descent-data-circle l2)
-  ( αH : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
+  ( Q : X → UU l2) (P : descent-data-circle l2)
+  ( αH : Eq-descent-data-circle P (ev-descent-data-circle l Q))
   where
 
   private
-    α : type-Descent-data-circle P ≃ Q (base-free-loop l)
+    α : type-descent-data-circle P ≃ Q (base-free-loop l)
     α = pr1 αH
 
-  map-path-over-loop-fib-aut-Descent-data-circle :
-    ( x y : type-Descent-data-circle P) →
-    ( map-equiv (aut-Descent-data-circle P) x ＝ y ) →
+  map-compute-path-over-loop-circle :
+    ( x y : type-descent-data-circle P) →
+    ( map-equiv (aut-descent-data-circle P) x ＝ y ) →
     ( path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
-  map-path-over-loop-fib-aut-Descent-data-circle x y q =
+  map-compute-path-over-loop-circle x y q =
     inv (pr2 αH _) ∙ (ap (map-equiv α) q)
 
-  is-equiv-map-path-over-loop-fib-aut-Descent-data-circle :
-    ( x y : type-Descent-data-circle P) →
-    is-equiv (map-path-over-loop-fib-aut-Descent-data-circle x y)
-  is-equiv-map-path-over-loop-fib-aut-Descent-data-circle x y =
+  is-equiv-map-compute-path-over-loop-circle :
+    ( x y : type-descent-data-circle P) →
+    is-equiv (map-compute-path-over-loop-circle x y)
+  is-equiv-map-compute-path-over-loop-circle x y =
     fundamental-theorem-id
       ( is-contr-equiv'
         ( fib (map-equiv α) _)
@@ -241,73 +241,73 @@ module _
         ( is-contr-map-is-equiv
           ( is-equiv-map-equiv α)
           ( _)))
-      ( map-path-over-loop-fib-aut-Descent-data-circle x)
+      ( map-compute-path-over-loop-circle x)
       ( _)
 
-  equiv-path-over-loop-fib-aut-Descent-data-circle :
-    ( x y : type-Descent-data-circle P) →
-    ( map-equiv (aut-Descent-data-circle P) x ＝ y) ≃
+  compute-path-over-loop-circle :
+    ( x y : type-descent-data-circle P) →
+    ( map-equiv (aut-descent-data-circle P) x ＝ y) ≃
     ( path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
-  pr1 (equiv-path-over-loop-fib-aut-Descent-data-circle x y) =
-    map-path-over-loop-fib-aut-Descent-data-circle x y
-  pr2 (equiv-path-over-loop-fib-aut-Descent-data-circle x y) =
-    is-equiv-map-path-over-loop-fib-aut-Descent-data-circle x y
+  pr1 (compute-path-over-loop-circle x y) =
+    map-compute-path-over-loop-circle x y
+  pr2 (compute-path-over-loop-circle x y) =
+    is-equiv-map-compute-path-over-loop-circle x y
 ```
 
 ```agda
 module _
   { l1 l2 : Level} {X : UU l1} (l : free-loop X)
-  ( Q : X → UU l2) (P : Descent-data-circle l2)
-  ( αH : Eq-Descent-data-circle P (ev-Descent-data-circle l Q))
+  ( Q : X → UU l2) (P : descent-data-circle l2)
+  ( αH : Eq-descent-data-circle P (ev-descent-data-circle l Q))
   where
 
   private
-    α : type-Descent-data-circle P ≃ Q (base-free-loop l)
+    α : type-descent-data-circle P ≃ Q (base-free-loop l)
     α = pr1 αH
 
-  ev-fixpoint-Descent-data-circle :
-    ( (x : X) → Q x) → fixpoint-Descent-data-circle l P
-  pr1 (ev-fixpoint-Descent-data-circle s) =
+  ev-fixpoint-descent-data-circle :
+    ( (x : X) → Q x) → fixpoint-descent-data-circle l P
+  pr1 (ev-fixpoint-descent-data-circle s) =
     map-inv-equiv
       ( α)
       ( s (base-free-loop l))
-  pr2 (ev-fixpoint-Descent-data-circle s) =
+  pr2 (ev-fixpoint-descent-data-circle s) =
     map-inv-is-equiv
-      ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αH _ _)
+      ( is-equiv-map-compute-path-over-loop-circle l Q P αH _ _)
       ( ( ap (tr Q (loop-free-loop l)) (issec-map-inv-equiv α _)) ∙
         ( ( apd s (loop-free-loop l)) ∙
           ( inv (issec-map-inv-equiv α _))))
 
-  equiv-fixpoint-Descent-data-circle-free-dependent-loop :
-    fixpoint-Descent-data-circle l P ≃ free-dependent-loop l Q
-  equiv-fixpoint-Descent-data-circle-free-dependent-loop =
+  equiv-fixpoint-descent-data-circle-free-dependent-loop :
+    fixpoint-descent-data-circle l P ≃ free-dependent-loop l Q
+  equiv-fixpoint-descent-data-circle-free-dependent-loop =
     equiv-Σ
       ( _)
       ( α)
       ( λ x →
-        equiv-path-over-loop-fib-aut-Descent-data-circle l Q P αH x x)
+        compute-path-over-loop-circle l Q P αH x x)
 
-  comparison-fixpoint-Descent-data-circle :
-    fixpoint-Descent-data-circle l P → free-dependent-loop l Q
-  comparison-fixpoint-Descent-data-circle =
-    map-equiv equiv-fixpoint-Descent-data-circle-free-dependent-loop
+  comparison-fixpoint-descent-data-circle :
+    fixpoint-descent-data-circle l P → free-dependent-loop l Q
+  comparison-fixpoint-descent-data-circle =
+    map-equiv equiv-fixpoint-descent-data-circle-free-dependent-loop
 
-  triangle-comparison-fixpoint-Descent-data-circle :
+  triangle-comparison-fixpoint-descent-data-circle :
     ( ev-free-loop-Π l Q) ~
-    ( comparison-fixpoint-Descent-data-circle ∘
-      ev-fixpoint-Descent-data-circle)
-  triangle-comparison-fixpoint-Descent-data-circle s =
+    ( comparison-fixpoint-descent-data-circle ∘
+      ev-fixpoint-descent-data-circle)
+  triangle-comparison-fixpoint-descent-data-circle s =
     eq-Eq-free-dependent-loop l Q
       ( ev-free-loop-Π l Q s)
-      ( ( comparison-fixpoint-Descent-data-circle ∘
-          ev-fixpoint-Descent-data-circle)
+      ( ( comparison-fixpoint-descent-data-circle ∘
+          ev-fixpoint-descent-data-circle)
         ( s))
       ( inv issec-inv-α ,
         inv
         ( ( horizontal-concat-Id²
             ( refl {x = ap _ (inv issec-inv-α)})
             ( issec-map-inv-is-equiv
-              ( is-equiv-map-path-over-loop-fib-aut-Descent-data-circle l Q P αH _ _)
+              ( is-equiv-map-compute-path-over-loop-circle l Q P αH _ _)
               ( _))) ∙
           ( ( inv (assoc (ap _ (inv issec-inv-α)) _ _)) ∙
             ( horizontal-concat-Id²
@@ -322,35 +322,35 @@ module _
     issec-inv-α : eq-value (map-equiv α ∘ map-inv-equiv α) id (s (base-free-loop l))
     issec-inv-α = issec-map-inv-equiv α _
 
-  is-equiv-comparison-fixpoint-Descent-data-circle :
-    is-equiv comparison-fixpoint-Descent-data-circle
-  is-equiv-comparison-fixpoint-Descent-data-circle =
-    is-equiv-map-equiv equiv-fixpoint-Descent-data-circle-free-dependent-loop
+  is-equiv-comparison-fixpoint-descent-data-circle :
+    is-equiv comparison-fixpoint-descent-data-circle
+  is-equiv-comparison-fixpoint-descent-data-circle =
+    is-equiv-map-equiv equiv-fixpoint-descent-data-circle-free-dependent-loop
 
-  is-equiv-ev-fixpoint-Descent-data-circle :
+  is-equiv-ev-fixpoint-descent-data-circle :
     ( dependent-universal-property-circle l2 l) →
-    is-equiv ev-fixpoint-Descent-data-circle
-  is-equiv-ev-fixpoint-Descent-data-circle dup-circle =
+    is-equiv ev-fixpoint-descent-data-circle
+  is-equiv-ev-fixpoint-descent-data-circle dup-circle =
     is-equiv-right-factor-htpy
       ( ev-free-loop-Π l Q)
-      ( comparison-fixpoint-Descent-data-circle)
-      ( ev-fixpoint-Descent-data-circle)
-      ( triangle-comparison-fixpoint-Descent-data-circle)
-      ( is-equiv-comparison-fixpoint-Descent-data-circle)
+      ( comparison-fixpoint-descent-data-circle)
+      ( ev-fixpoint-descent-data-circle)
+      ( triangle-comparison-fixpoint-descent-data-circle)
+      ( is-equiv-comparison-fixpoint-descent-data-circle)
       ( dup-circle Q)
 
-  equiv-ev-fixpoint-Descent-data-circle :
+  equiv-ev-fixpoint-descent-data-circle :
     ( dependent-universal-property-circle l2 l) →
-    ( (x : X) → Q x) ≃ (fixpoint-Descent-data-circle l P)
-  pr1 (equiv-ev-fixpoint-Descent-data-circle dup-circle) =
-    ev-fixpoint-Descent-data-circle
-  pr2 (equiv-ev-fixpoint-Descent-data-circle dup-circle) =
-    is-equiv-ev-fixpoint-Descent-data-circle dup-circle
-
-  compute-ev-fixpoint-Descent-data-circle :
-    ( pr1 ∘ ev-fixpoint-Descent-data-circle ) ~
+    ( (x : X) → Q x) ≃ (fixpoint-descent-data-circle l P)
+  pr1 (equiv-ev-fixpoint-descent-data-circle dup-circle) =
+    ev-fixpoint-descent-data-circle
+  pr2 (equiv-ev-fixpoint-descent-data-circle dup-circle) =
+    is-equiv-ev-fixpoint-descent-data-circle dup-circle
+
+  compute-ev-fixpoint-descent-data-circle :
+    ( pr1 ∘ ev-fixpoint-descent-data-circle ) ~
     ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) _))
-  compute-ev-fixpoint-Descent-data-circle = refl-htpy
+  compute-ev-fixpoint-descent-data-circle = refl-htpy
 ```
 
 ### Families of maps over the circle are maps commuting with the respective automorphisms
@@ -358,40 +358,40 @@ module _
 ```agda
 module _
   { l1 l2 l3 : Level} {X : UU l1} (l : free-loop X)
-  ( A : X → UU l2) (P : Descent-data-circle l2)
-  ( αH : Eq-Descent-data-circle P (ev-Descent-data-circle l A))
-  ( B : X → UU l3) (Q : Descent-data-circle l3)
-  ( βK : Eq-Descent-data-circle Q (ev-Descent-data-circle l B))
+  ( A : X → UU l2) (P : descent-data-circle l2)
+  ( αH : Eq-descent-data-circle P (ev-descent-data-circle l A))
+  ( B : X → UU l3) (Q : descent-data-circle l3)
+  ( βK : Eq-descent-data-circle Q (ev-descent-data-circle l B))
   where
 
   private
     Y : UU l2
-    Y = type-Descent-data-circle P
+    Y = type-descent-data-circle P
     e : Aut Y
-    e = aut-Descent-data-circle P
+    e = aut-descent-data-circle P
     Z : UU l3
-    Z = type-Descent-data-circle Q
+    Z = type-descent-data-circle Q
     f : Aut Z
-    f = aut-Descent-data-circle Q
+    f = aut-descent-data-circle Q
 
     α : Y ≃ A (base-free-loop l)
     α = pr1 αH
     β : Z ≃ B (base-free-loop l)
     β = pr1 βK
 
-  Descent-data-circle-function-type : Descent-data-circle (l2 ⊔ l3)
-  pr1 Descent-data-circle-function-type =
+  descent-data-circle-function-type : descent-data-circle (l2 ⊔ l3)
+  pr1 descent-data-circle-function-type =
     Y → Z
-  pr2 Descent-data-circle-function-type =
+  pr2 descent-data-circle-function-type =
     (equiv-postcomp _ f) ∘e (equiv-precomp (inv-equiv e) _)
 
-  eq-Descent-data-circle-function-type :
-    Eq-Descent-data-circle
-      ( Descent-data-circle-function-type)
-      ( ev-Descent-data-circle l (λ s → (A s → B s)))
-  pr1 eq-Descent-data-circle-function-type =
+  eq-descent-data-circle-function-type :
+    Eq-descent-data-circle
+      ( descent-data-circle-function-type)
+      ( ev-descent-data-circle l (λ s → (A s → B s)))
+  pr1 eq-descent-data-circle-function-type =
     (equiv-postcomp _ β) ∘e (equiv-precomp (inv-equiv α) _)
-  pr2 eq-Descent-data-circle-function-type h =
+  pr2 eq-descent-data-circle-function-type h =
     ( eq-htpy
       ( htpy-comp-horizontal
         ( h ·l
@@ -405,27 +405,27 @@ module _
         ( pr2 βK))) ∙
     ( inv
       ( ( tr-function-type A B (loop-free-loop l))
-        ( map-equiv (pr1 eq-Descent-data-circle-function-type) h)))
+        ( map-equiv (pr1 eq-descent-data-circle-function-type) h)))
 
-  equiv-fixpoint-Descent-data-circle-function-type-hom :
-    fixpoint-Descent-data-circle l Descent-data-circle-function-type ≃
-    hom-Descent-data-circle l P Q
-  equiv-fixpoint-Descent-data-circle-function-type-hom =
+  equiv-fixpoint-descent-data-circle-function-type-hom :
+    fixpoint-descent-data-circle l descent-data-circle-function-type ≃
+    hom-descent-data-circle l P Q
+  equiv-fixpoint-descent-data-circle-function-type-hom =
     equiv-tot
       (λ h →
         ( equiv-inv-htpy _ _) ∘e
         ( ( inv-equiv (equiv-coherence-triangle-maps-inv-top _ _ e)) ∘e
           ( equiv-funext)))
 
-  equiv-ev-Descent-data-circle-function-type-hom :
+  equiv-ev-descent-data-circle-function-type-hom :
     dependent-universal-property-circle (l2 ⊔ l3) l →
-    ((s : X) → A s → B s) ≃ (hom-Descent-data-circle l P Q)
-  equiv-ev-Descent-data-circle-function-type-hom dup-circle =
-    equiv-fixpoint-Descent-data-circle-function-type-hom ∘e
-    ( equiv-ev-fixpoint-Descent-data-circle
+    ((s : X) → A s → B s) ≃ (hom-descent-data-circle l P Q)
+  equiv-ev-descent-data-circle-function-type-hom dup-circle =
+    equiv-fixpoint-descent-data-circle-function-type-hom ∘e
+    ( equiv-ev-fixpoint-descent-data-circle
       ( l)
       ( λ s → A s → B s)
-      ( Descent-data-circle-function-type)
-      ( eq-Descent-data-circle-function-type)
+      ( descent-data-circle-function-type)
+      ( eq-descent-data-circle-function-type)
       ( dup-circle))
 ```
diff --git a/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md b/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
index 866f534ef2..095a83053b 100644
--- a/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/universal-cover-circle.lagda.md
@@ -145,9 +145,9 @@ abstract
     ( {k : Level} → dependent-universal-property-circle k l) →
     Σ ( X → UU lzero)
       ( λ P →
-        Eq-Descent-data-circle
+        Eq-descent-data-circle
         ( pair ℤ equiv-succ-ℤ)
-        ( ev-Descent-data-circle l P))
+        ( ev-descent-data-circle l P))
   Fundamental-cover-circle {l1} l dup-circle =
     center
       ( unique-family-property-universal-property-circle l

From 73caadf6d2d95a118ef8e27e52d6ce3a1b9948a0 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 29 Mar 2023 17:19:03 +0200
Subject: [PATCH 10/13] Avoid pattern matching in definitions

It results in a definition by induction, which is undesirable esp.
when eliminating into a universe - then Agda could have trouble
telling e.g. if the result of an application is always a Sigma or not.
---
 .../descent-circle.lagda.md                   | 21 +++++++++++--------
 1 file changed, 12 insertions(+), 9 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index d0b566cbbc..7aea00b073 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -77,9 +77,11 @@ hom-descent-data-circle :
   { l1 l2 l3 : Level} {X : UU l1} (l : free-loop X)
   ( P : descent-data-circle l2) (Q : descent-data-circle l3) →
   UU (l2 ⊔ l3)
-hom-descent-data-circle _ (Y , e) (Z , f) =
-  Σ ( Y → Z)
-    ( λ h → (h ∘ (map-equiv e)) ~ ((map-equiv f) ∘ h))
+hom-descent-data-circle _ P Q =
+  Σ ( (type-descent-data-circle P) → (type-descent-data-circle Q))
+    ( λ h →
+      ( h ∘ (map-equiv (aut-descent-data-circle P))) ~
+      ( (map-equiv (aut-descent-data-circle Q)) ∘ h))
 ```
 
 ## Properties
@@ -99,7 +101,7 @@ Eq-descent-data-circle P Q =
 refl-Eq-descent-data-circle :
   { l1 : Level} (P : descent-data-circle l1) →
   Eq-descent-data-circle P P
-refl-Eq-descent-data-circle (X , e) = id-equiv , refl-htpy
+refl-Eq-descent-data-circle P = id-equiv , refl-htpy
 
 Eq-eq-descent-data-circle :
   { l1 : Level} (P Q : descent-data-circle l1) →
@@ -109,13 +111,14 @@ Eq-eq-descent-data-circle P .P refl = refl-Eq-descent-data-circle P
 is-contr-total-Eq-descent-data-circle :
   { l1 : Level} (P : descent-data-circle l1) →
   is-contr (Σ (descent-data-circle l1) (Eq-descent-data-circle P))
-is-contr-total-Eq-descent-data-circle (X , e) =
+is-contr-total-Eq-descent-data-circle P =
   is-contr-total-Eq-structure
     ( λ Y f h →
-      ((map-equiv h) ∘ (map-equiv e)) ~ ((map-equiv f) ∘ (map-equiv h)))
-    ( is-contr-total-equiv X)
-    ( X , id-equiv)
-  ( is-contr-total-htpy-equiv e)
+      ( (map-equiv h) ∘ (map-equiv (aut-descent-data-circle P))) ~
+      ( (map-equiv f) ∘ (map-equiv h)))
+    ( is-contr-total-equiv (type-descent-data-circle P))
+    ( type-descent-data-circle P , id-equiv)
+  ( is-contr-total-htpy-equiv (aut-descent-data-circle P))
 
 is-equiv-Eq-eq-descent-data-circle :
   { l1 : Level} (P Q : descent-data-circle l1) →

From f33026efdd369a4d08c77b17653fec9370ef0823 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 29 Mar 2023 17:41:30 +0200
Subject: [PATCH 11/13] Reduce the amount of inference

---
 .../descent-circle.lagda.md                   | 51 ++++++++++++-------
 1 file changed, 33 insertions(+), 18 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 7aea00b073..b59fe9c87c 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -161,7 +161,7 @@ module _
   triangle-comparison-descent-data-circle P =
     eq-Eq-descent-data-circle
       ( ev-descent-data-circle P)
-      ( comparison-descent-data-circle _ (ev-free-loop l (UU l2) P))
+      ( comparison-descent-data-circle l2 (ev-free-loop l (UU l2) P))
       ( id-equiv , (htpy-eq (inv (tr-equiv-eq-ap (loop-free-loop l)))))
 
   is-equiv-ev-descent-data-circle-universal-property-circle :
@@ -231,7 +231,7 @@ module _
     ( map-equiv (aut-descent-data-circle P) x ＝ y ) →
     ( path-over Q (loop-free-loop l) (map-equiv α x) (map-equiv α y))
   map-compute-path-over-loop-circle x y q =
-    inv (pr2 αH _) ∙ (ap (map-equiv α) q)
+    inv (pr2 αH x) ∙ (ap (map-equiv α) q)
 
   is-equiv-map-compute-path-over-loop-circle :
     ( x y : type-descent-data-circle P) →
@@ -239,13 +239,13 @@ module _
   is-equiv-map-compute-path-over-loop-circle x y =
     fundamental-theorem-id
       ( is-contr-equiv'
-        ( fib (map-equiv α) _)
+        ( fib (map-equiv α) (tr Q (loop-free-loop l) (map-equiv α x)))
         ( equiv-fib _ _)
         ( is-contr-map-is-equiv
           ( is-equiv-map-equiv α)
-          ( _)))
+          ( tr Q (loop-free-loop l) (map-equiv α x))))
       ( map-compute-path-over-loop-circle x)
-      ( _)
+      ( y)
 
   compute-path-over-loop-circle :
     ( x y : type-descent-data-circle P) →
@@ -276,16 +276,24 @@ module _
       ( s (base-free-loop l))
   pr2 (ev-fixpoint-descent-data-circle s) =
     map-inv-is-equiv
-      ( is-equiv-map-compute-path-over-loop-circle l Q P αH _ _)
-      ( ( ap (tr Q (loop-free-loop l)) (issec-map-inv-equiv α _)) ∙
+      ( is-equiv-map-compute-path-over-loop-circle
+        ( l)
+        ( Q)
+        ( P)
+        ( αH)
+        ( map-inv-equiv α (s (base-free-loop l)))
+        ( map-inv-equiv α (s (base-free-loop l))))
+      ( ( ap
+          ( tr Q (loop-free-loop l))
+          ( issec-map-inv-equiv α (s (base-free-loop l)))) ∙
         ( ( apd s (loop-free-loop l)) ∙
-          ( inv (issec-map-inv-equiv α _))))
+          ( inv (issec-map-inv-equiv α (s (base-free-loop l))))))
 
   equiv-fixpoint-descent-data-circle-free-dependent-loop :
     fixpoint-descent-data-circle l P ≃ free-dependent-loop l Q
   equiv-fixpoint-descent-data-circle-free-dependent-loop =
     equiv-Σ
-      ( _)
+      ( λ x → path-over Q (loop-free-loop l) x x)
       ( α)
       ( λ x →
         compute-path-over-loop-circle l Q P αH x x)
@@ -308,14 +316,20 @@ module _
       ( inv issec-inv-α ,
         inv
         ( ( horizontal-concat-Id²
-            ( refl {x = ap _ (inv issec-inv-α)})
+            ( refl {x = ap (tr Q (loop-free-loop l)) (inv issec-inv-α)})
             ( issec-map-inv-is-equiv
-              ( is-equiv-map-compute-path-over-loop-circle l Q P αH _ _)
+              ( is-equiv-map-compute-path-over-loop-circle
+                ( l)
+                ( Q)
+                ( P)
+                ( αH)
+                ( map-inv-equiv α (s (base-free-loop l)))
+                ( pr1 (ev-fixpoint-descent-data-circle s)))
               ( _))) ∙
           ( ( inv (assoc (ap _ (inv issec-inv-α)) _ _)) ∙
             ( horizontal-concat-Id²
               ( inv
-                ( ap-concat-eq _
+                ( ap-concat-eq (tr Q (loop-free-loop l))
                   ( inv issec-inv-α)
                   ( issec-inv-α)
                   ( refl)
@@ -323,7 +337,7 @@ module _
               ( refl)))))
     where
     issec-inv-α : eq-value (map-equiv α ∘ map-inv-equiv α) id (s (base-free-loop l))
-    issec-inv-α = issec-map-inv-equiv α _
+    issec-inv-α = issec-map-inv-equiv α (s (base-free-loop l))
 
   is-equiv-comparison-fixpoint-descent-data-circle :
     is-equiv comparison-fixpoint-descent-data-circle
@@ -352,7 +366,7 @@ module _
 
   compute-ev-fixpoint-descent-data-circle :
     ( pr1 ∘ ev-fixpoint-descent-data-circle ) ~
-    ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) _))
+    ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) Q))
   compute-ev-fixpoint-descent-data-circle = refl-htpy
 ```
 
@@ -386,14 +400,14 @@ module _
   pr1 descent-data-circle-function-type =
     Y → Z
   pr2 descent-data-circle-function-type =
-    (equiv-postcomp _ f) ∘e (equiv-precomp (inv-equiv e) _)
+    (equiv-postcomp Y f) ∘e (equiv-precomp (inv-equiv e) Z)
 
   eq-descent-data-circle-function-type :
     Eq-descent-data-circle
       ( descent-data-circle-function-type)
       ( ev-descent-data-circle l (λ s → (A s → B s)))
   pr1 eq-descent-data-circle-function-type =
-    (equiv-postcomp _ β) ∘e (equiv-precomp (inv-equiv α) _)
+    (equiv-postcomp (A (base-free-loop l)) β) ∘e (equiv-precomp (inv-equiv α) Z)
   pr2 eq-descent-data-circle-function-type h =
     ( eq-htpy
       ( htpy-comp-horizontal
@@ -416,8 +430,9 @@ module _
   equiv-fixpoint-descent-data-circle-function-type-hom =
     equiv-tot
       (λ h →
-        ( equiv-inv-htpy _ _) ∘e
-        ( ( inv-equiv (equiv-coherence-triangle-maps-inv-top _ _ e)) ∘e
+        ( equiv-inv-htpy (((map-equiv f) ∘ h)) (h ∘ (map-equiv e))) ∘e
+        ( ( inv-equiv
+            ( equiv-coherence-triangle-maps-inv-top ((map-equiv f) ∘ h) h e)) ∘e
           ( equiv-funext)))
 
   equiv-ev-descent-data-circle-function-type-hom :

From a7f70961480681f4becf6ab28c3125a10be430ea Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Wed, 29 Mar 2023 17:52:01 +0200
Subject: [PATCH 12/13] Replace handwritten diagrams with coherence types

---
 .../descent-circle.lagda.md                   | 41 +++++++++++++------
 1 file changed, 28 insertions(+), 13 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index b59fe9c87c..10cbb6f2af 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -80,8 +80,11 @@ hom-descent-data-circle :
 hom-descent-data-circle _ P Q =
   Σ ( (type-descent-data-circle P) → (type-descent-data-circle Q))
     ( λ h →
-      ( h ∘ (map-equiv (aut-descent-data-circle P))) ~
-      ( (map-equiv (aut-descent-data-circle Q)) ∘ h))
+      coherence-square-maps
+        ( h)
+        ( map-equiv (aut-descent-data-circle P))
+        ( map-equiv (aut-descent-data-circle Q))
+        ( h))
 ```
 
 ## Properties
@@ -95,8 +98,11 @@ Eq-descent-data-circle :
 Eq-descent-data-circle P Q =
   Σ ( (type-descent-data-circle P) ≃ (type-descent-data-circle Q))
     ( λ h →
-      ( (map-equiv h) ∘ (map-equiv (aut-descent-data-circle P))) ~
-      ( (map-equiv (aut-descent-data-circle Q)) ∘ (map-equiv h)))
+      coherence-square-maps
+        ( map-equiv h)
+        ( map-equiv (aut-descent-data-circle P))
+        ( map-equiv (aut-descent-data-circle Q))
+        ( map-equiv h))
 
 refl-Eq-descent-data-circle :
   { l1 : Level} (P : descent-data-circle l1) →
@@ -114,8 +120,11 @@ is-contr-total-Eq-descent-data-circle :
 is-contr-total-Eq-descent-data-circle P =
   is-contr-total-Eq-structure
     ( λ Y f h →
-      ( (map-equiv h) ∘ (map-equiv (aut-descent-data-circle P))) ~
-      ( (map-equiv f) ∘ (map-equiv h)))
+      coherence-square-maps
+        ( map-equiv h)
+        ( map-equiv (aut-descent-data-circle P))
+        ( map-equiv f)
+        ( map-equiv h))
     ( is-contr-total-equiv (type-descent-data-circle P))
     ( type-descent-data-circle P , id-equiv)
   ( is-contr-total-htpy-equiv (aut-descent-data-circle P))
@@ -156,8 +165,10 @@ module _
   pr2 (ev-descent-data-circle P) = equiv-tr P (loop-free-loop l)
 
   triangle-comparison-descent-data-circle :
-    ev-descent-data-circle ~
-    ( (comparison-descent-data-circle l2) ∘ (ev-free-loop l (UU l2)))
+    coherence-triangle-maps
+      ( ev-descent-data-circle)
+      ( comparison-descent-data-circle l2)
+      ( ev-free-loop l (UU l2))
   triangle-comparison-descent-data-circle P =
     eq-Eq-descent-data-circle
       ( ev-descent-data-circle P)
@@ -304,9 +315,10 @@ module _
     map-equiv equiv-fixpoint-descent-data-circle-free-dependent-loop
 
   triangle-comparison-fixpoint-descent-data-circle :
-    ( ev-free-loop-Π l Q) ~
-    ( comparison-fixpoint-descent-data-circle ∘
-      ev-fixpoint-descent-data-circle)
+    coherence-triangle-maps
+      ( ev-free-loop-Π l Q)
+      ( comparison-fixpoint-descent-data-circle)
+      ( ev-fixpoint-descent-data-circle)
   triangle-comparison-fixpoint-descent-data-circle s =
     eq-Eq-free-dependent-loop l Q
       ( ev-free-loop-Π l Q s)
@@ -365,8 +377,11 @@ module _
     is-equiv-ev-fixpoint-descent-data-circle dup-circle
 
   compute-ev-fixpoint-descent-data-circle :
-    ( pr1 ∘ ev-fixpoint-descent-data-circle ) ~
-    ( (map-inv-equiv α) ∘ (ev-pt (base-free-loop l) Q))
+    coherence-square-maps
+      ( ev-fixpoint-descent-data-circle)
+      ( ev-pt (base-free-loop l) Q)
+      ( pr1)
+      ( map-inv-equiv α)
   compute-ev-fixpoint-descent-data-circle = refl-htpy
 ```
 

From 05d8fda46f91503ca7b7e008f5ff14ea08897001 Mon Sep 17 00:00:00 2001
From: VojtechStep <vojtechstepancik@outlook.com>
Date: Thu, 30 Mar 2023 22:03:40 +0200
Subject: [PATCH 13/13] Shorten section headings

---
 src/synthetic-homotopy-theory/descent-circle.lagda.md | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/src/synthetic-homotopy-theory/descent-circle.lagda.md b/src/synthetic-homotopy-theory/descent-circle.lagda.md
index 10cbb6f2af..e0fa95b6fc 100644
--- a/src/synthetic-homotopy-theory/descent-circle.lagda.md
+++ b/src/synthetic-homotopy-theory/descent-circle.lagda.md
@@ -224,7 +224,10 @@ module _
         ( Q))
 ```
 
-### Sections of type families over the circle are exactly the fixpoints of the automorphism from the characteristic descent data
+### Characterization of sections of type families over the circle
+
+Sections of type families over the circle are exactly the fixpoints of the
+automorphism from the characteristic descent data.
 
 ```agda
 module _
@@ -385,7 +388,10 @@ module _
   compute-ev-fixpoint-descent-data-circle = refl-htpy
 ```
 
-### Families of maps over the circle are maps commuting with the respective automorphisms
+### Characterization of families of maps over the circle
+
+Families of maps over the circle are maps commuting with the respective
+automorphisms.
 
 ```agda
 module _
